// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class c2s_APPEAR_NEW_OBJECT;
struct c2s_APPEAR_NEW_OBJECTDefaultTypeInternal;
extern c2s_APPEAR_NEW_OBJECTDefaultTypeInternal _c2s_APPEAR_NEW_OBJECT_default_instance_;
class c2s_ARRIVE_NEW_ROOM;
struct c2s_ARRIVE_NEW_ROOMDefaultTypeInternal;
extern c2s_ARRIVE_NEW_ROOMDefaultTypeInternal _c2s_ARRIVE_NEW_ROOM_default_instance_;
class c2s_BREAK_TILE;
struct c2s_BREAK_TILEDefaultTypeInternal;
extern c2s_BREAK_TILEDefaultTypeInternal _c2s_BREAK_TILE_default_instance_;
class c2s_BREAK_TILE_WALL;
struct c2s_BREAK_TILE_WALLDefaultTypeInternal;
extern c2s_BREAK_TILE_WALLDefaultTypeInternal _c2s_BREAK_TILE_WALL_default_instance_;
class c2s_CREATE_ITEM;
struct c2s_CREATE_ITEMDefaultTypeInternal;
extern c2s_CREATE_ITEMDefaultTypeInternal _c2s_CREATE_ITEM_default_instance_;
class c2s_CREATE_MISSILE;
struct c2s_CREATE_MISSILEDefaultTypeInternal;
extern c2s_CREATE_MISSILEDefaultTypeInternal _c2s_CREATE_MISSILE_default_instance_;
class c2s_ENTER;
struct c2s_ENTERDefaultTypeInternal;
extern c2s_ENTERDefaultTypeInternal _c2s_ENTER_default_instance_;
class c2s_GET_ITEM;
struct c2s_GET_ITEMDefaultTypeInternal;
extern c2s_GET_ITEMDefaultTypeInternal _c2s_GET_ITEM_default_instance_;
class c2s_INPUT_KEY;
struct c2s_INPUT_KEYDefaultTypeInternal;
extern c2s_INPUT_KEYDefaultTypeInternal _c2s_INPUT_KEY_default_instance_;
class c2s_LEAVE_OBJECT;
struct c2s_LEAVE_OBJECTDefaultTypeInternal;
extern c2s_LEAVE_OBJECTDefaultTypeInternal _c2s_LEAVE_OBJECT_default_instance_;
class c2s_LOGIN;
struct c2s_LOGINDefaultTypeInternal;
extern c2s_LOGINDefaultTypeInternal _c2s_LOGIN_default_instance_;
class c2s_MOVE;
struct c2s_MOVEDefaultTypeInternal;
extern c2s_MOVEDefaultTypeInternal _c2s_MOVE_default_instance_;
class c2s_PLACE_TILE;
struct c2s_PLACE_TILEDefaultTypeInternal;
extern c2s_PLACE_TILEDefaultTypeInternal _c2s_PLACE_TILE_default_instance_;
class c2s_PLACE_TILE_WALL;
struct c2s_PLACE_TILE_WALLDefaultTypeInternal;
extern c2s_PLACE_TILE_WALLDefaultTypeInternal _c2s_PLACE_TILE_WALL_default_instance_;
class c2s_TRY_GET_ITEM;
struct c2s_TRY_GET_ITEMDefaultTypeInternal;
extern c2s_TRY_GET_ITEMDefaultTypeInternal _c2s_TRY_GET_ITEM_default_instance_;
class c2s_TRY_NEW_ROOM;
struct c2s_TRY_NEW_ROOMDefaultTypeInternal;
extern c2s_TRY_NEW_ROOMDefaultTypeInternal _c2s_TRY_NEW_ROOM_default_instance_;
class s2c_APPEAR_NEW_OBJECT;
struct s2c_APPEAR_NEW_OBJECTDefaultTypeInternal;
extern s2c_APPEAR_NEW_OBJECTDefaultTypeInternal _s2c_APPEAR_NEW_OBJECT_default_instance_;
class s2c_ARRIVE_NEW_ROOM;
struct s2c_ARRIVE_NEW_ROOMDefaultTypeInternal;
extern s2c_ARRIVE_NEW_ROOMDefaultTypeInternal _s2c_ARRIVE_NEW_ROOM_default_instance_;
class s2c_BREAK_TILE;
struct s2c_BREAK_TILEDefaultTypeInternal;
extern s2c_BREAK_TILEDefaultTypeInternal _s2c_BREAK_TILE_default_instance_;
class s2c_BREAK_TILE_WALL;
struct s2c_BREAK_TILE_WALLDefaultTypeInternal;
extern s2c_BREAK_TILE_WALLDefaultTypeInternal _s2c_BREAK_TILE_WALL_default_instance_;
class s2c_CREATE_ITEM;
struct s2c_CREATE_ITEMDefaultTypeInternal;
extern s2c_CREATE_ITEMDefaultTypeInternal _s2c_CREATE_ITEM_default_instance_;
class s2c_CREATE_MISSILE;
struct s2c_CREATE_MISSILEDefaultTypeInternal;
extern s2c_CREATE_MISSILEDefaultTypeInternal _s2c_CREATE_MISSILE_default_instance_;
class s2c_ENTER;
struct s2c_ENTERDefaultTypeInternal;
extern s2c_ENTERDefaultTypeInternal _s2c_ENTER_default_instance_;
class s2c_GET_ITEM;
struct s2c_GET_ITEMDefaultTypeInternal;
extern s2c_GET_ITEMDefaultTypeInternal _s2c_GET_ITEM_default_instance_;
class s2c_INPUT_KEY;
struct s2c_INPUT_KEYDefaultTypeInternal;
extern s2c_INPUT_KEYDefaultTypeInternal _s2c_INPUT_KEY_default_instance_;
class s2c_LEAVE_OBJECT;
struct s2c_LEAVE_OBJECTDefaultTypeInternal;
extern s2c_LEAVE_OBJECTDefaultTypeInternal _s2c_LEAVE_OBJECT_default_instance_;
class s2c_LOGIN;
struct s2c_LOGINDefaultTypeInternal;
extern s2c_LOGINDefaultTypeInternal _s2c_LOGIN_default_instance_;
class s2c_MOVE;
struct s2c_MOVEDefaultTypeInternal;
extern s2c_MOVEDefaultTypeInternal _s2c_MOVE_default_instance_;
class s2c_PLACE_TILE;
struct s2c_PLACE_TILEDefaultTypeInternal;
extern s2c_PLACE_TILEDefaultTypeInternal _s2c_PLACE_TILE_default_instance_;
class s2c_PLACE_TILE_WALL;
struct s2c_PLACE_TILE_WALLDefaultTypeInternal;
extern s2c_PLACE_TILE_WALLDefaultTypeInternal _s2c_PLACE_TILE_WALL_default_instance_;
class s2c_TRY_GET_ITEM;
struct s2c_TRY_GET_ITEMDefaultTypeInternal;
extern s2c_TRY_GET_ITEMDefaultTypeInternal _s2c_TRY_GET_ITEM_default_instance_;
class s2c_TRY_NEW_ROOM;
struct s2c_TRY_NEW_ROOMDefaultTypeInternal;
extern s2c_TRY_NEW_ROOMDefaultTypeInternal _s2c_TRY_NEW_ROOM_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::c2s_APPEAR_NEW_OBJECT* Arena::CreateMaybeMessage<::Protocol::c2s_APPEAR_NEW_OBJECT>(Arena*);
template<> ::Protocol::c2s_ARRIVE_NEW_ROOM* Arena::CreateMaybeMessage<::Protocol::c2s_ARRIVE_NEW_ROOM>(Arena*);
template<> ::Protocol::c2s_BREAK_TILE* Arena::CreateMaybeMessage<::Protocol::c2s_BREAK_TILE>(Arena*);
template<> ::Protocol::c2s_BREAK_TILE_WALL* Arena::CreateMaybeMessage<::Protocol::c2s_BREAK_TILE_WALL>(Arena*);
template<> ::Protocol::c2s_CREATE_ITEM* Arena::CreateMaybeMessage<::Protocol::c2s_CREATE_ITEM>(Arena*);
template<> ::Protocol::c2s_CREATE_MISSILE* Arena::CreateMaybeMessage<::Protocol::c2s_CREATE_MISSILE>(Arena*);
template<> ::Protocol::c2s_ENTER* Arena::CreateMaybeMessage<::Protocol::c2s_ENTER>(Arena*);
template<> ::Protocol::c2s_GET_ITEM* Arena::CreateMaybeMessage<::Protocol::c2s_GET_ITEM>(Arena*);
template<> ::Protocol::c2s_INPUT_KEY* Arena::CreateMaybeMessage<::Protocol::c2s_INPUT_KEY>(Arena*);
template<> ::Protocol::c2s_LEAVE_OBJECT* Arena::CreateMaybeMessage<::Protocol::c2s_LEAVE_OBJECT>(Arena*);
template<> ::Protocol::c2s_LOGIN* Arena::CreateMaybeMessage<::Protocol::c2s_LOGIN>(Arena*);
template<> ::Protocol::c2s_MOVE* Arena::CreateMaybeMessage<::Protocol::c2s_MOVE>(Arena*);
template<> ::Protocol::c2s_PLACE_TILE* Arena::CreateMaybeMessage<::Protocol::c2s_PLACE_TILE>(Arena*);
template<> ::Protocol::c2s_PLACE_TILE_WALL* Arena::CreateMaybeMessage<::Protocol::c2s_PLACE_TILE_WALL>(Arena*);
template<> ::Protocol::c2s_TRY_GET_ITEM* Arena::CreateMaybeMessage<::Protocol::c2s_TRY_GET_ITEM>(Arena*);
template<> ::Protocol::c2s_TRY_NEW_ROOM* Arena::CreateMaybeMessage<::Protocol::c2s_TRY_NEW_ROOM>(Arena*);
template<> ::Protocol::s2c_APPEAR_NEW_OBJECT* Arena::CreateMaybeMessage<::Protocol::s2c_APPEAR_NEW_OBJECT>(Arena*);
template<> ::Protocol::s2c_ARRIVE_NEW_ROOM* Arena::CreateMaybeMessage<::Protocol::s2c_ARRIVE_NEW_ROOM>(Arena*);
template<> ::Protocol::s2c_BREAK_TILE* Arena::CreateMaybeMessage<::Protocol::s2c_BREAK_TILE>(Arena*);
template<> ::Protocol::s2c_BREAK_TILE_WALL* Arena::CreateMaybeMessage<::Protocol::s2c_BREAK_TILE_WALL>(Arena*);
template<> ::Protocol::s2c_CREATE_ITEM* Arena::CreateMaybeMessage<::Protocol::s2c_CREATE_ITEM>(Arena*);
template<> ::Protocol::s2c_CREATE_MISSILE* Arena::CreateMaybeMessage<::Protocol::s2c_CREATE_MISSILE>(Arena*);
template<> ::Protocol::s2c_ENTER* Arena::CreateMaybeMessage<::Protocol::s2c_ENTER>(Arena*);
template<> ::Protocol::s2c_GET_ITEM* Arena::CreateMaybeMessage<::Protocol::s2c_GET_ITEM>(Arena*);
template<> ::Protocol::s2c_INPUT_KEY* Arena::CreateMaybeMessage<::Protocol::s2c_INPUT_KEY>(Arena*);
template<> ::Protocol::s2c_LEAVE_OBJECT* Arena::CreateMaybeMessage<::Protocol::s2c_LEAVE_OBJECT>(Arena*);
template<> ::Protocol::s2c_LOGIN* Arena::CreateMaybeMessage<::Protocol::s2c_LOGIN>(Arena*);
template<> ::Protocol::s2c_MOVE* Arena::CreateMaybeMessage<::Protocol::s2c_MOVE>(Arena*);
template<> ::Protocol::s2c_PLACE_TILE* Arena::CreateMaybeMessage<::Protocol::s2c_PLACE_TILE>(Arena*);
template<> ::Protocol::s2c_PLACE_TILE_WALL* Arena::CreateMaybeMessage<::Protocol::s2c_PLACE_TILE_WALL>(Arena*);
template<> ::Protocol::s2c_TRY_GET_ITEM* Arena::CreateMaybeMessage<::Protocol::s2c_TRY_GET_ITEM>(Arena*);
template<> ::Protocol::s2c_TRY_NEW_ROOM* Arena::CreateMaybeMessage<::Protocol::s2c_TRY_NEW_ROOM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class c2s_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_LOGIN) */ {
 public:
  inline c2s_LOGIN() : c2s_LOGIN(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_LOGIN(const c2s_LOGIN& from);
  c2s_LOGIN(c2s_LOGIN&& from) noexcept
    : c2s_LOGIN() {
    *this = ::std::move(from);
  }

  inline c2s_LOGIN& operator=(const c2s_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_LOGIN& operator=(c2s_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_LOGIN* internal_default_instance() {
    return reinterpret_cast<const c2s_LOGIN*>(
               &_c2s_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(c2s_LOGIN& a, c2s_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_LOGIN";
  }
  protected:
  explicit c2s_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_LOGIN) */ {
 public:
  inline s2c_LOGIN() : s2c_LOGIN(nullptr) {}
  ~s2c_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR s2c_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_LOGIN(const s2c_LOGIN& from);
  s2c_LOGIN(s2c_LOGIN&& from) noexcept
    : s2c_LOGIN() {
    *this = ::std::move(from);
  }

  inline s2c_LOGIN& operator=(const s2c_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_LOGIN& operator=(s2c_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_LOGIN* internal_default_instance() {
    return reinterpret_cast<const s2c_LOGIN*>(
               &_s2c_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(s2c_LOGIN& a, s2c_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_LOGIN& from) {
    s2c_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_LOGIN";
  }
  protected:
  explicit s2c_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kSeedFieldNumber = 1,
  };
  // uint64 id = 2;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // int32 seed = 1;
  void clear_seed();
  int32_t seed() const;
  void set_seed(int32_t value);
  private:
  int32_t _internal_seed() const;
  void _internal_set_seed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    int32_t seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_ENTER) */ {
 public:
  inline c2s_ENTER() : c2s_ENTER(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_ENTER(const c2s_ENTER& from);
  c2s_ENTER(c2s_ENTER&& from) noexcept
    : c2s_ENTER() {
    *this = ::std::move(from);
  }

  inline c2s_ENTER& operator=(const c2s_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_ENTER& operator=(c2s_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_ENTER* internal_default_instance() {
    return reinterpret_cast<const c2s_ENTER*>(
               &_c2s_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(c2s_ENTER& a, c2s_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_ENTER& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_ENTER& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_ENTER";
  }
  protected:
  explicit c2s_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_ENTER) */ {
 public:
  inline s2c_ENTER() : s2c_ENTER(nullptr) {}
  ~s2c_ENTER() override;
  explicit PROTOBUF_CONSTEXPR s2c_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_ENTER(const s2c_ENTER& from);
  s2c_ENTER(s2c_ENTER&& from) noexcept
    : s2c_ENTER() {
    *this = ::std::move(from);
  }

  inline s2c_ENTER& operator=(const s2c_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_ENTER& operator=(s2c_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_ENTER* internal_default_instance() {
    return reinterpret_cast<const s2c_ENTER*>(
               &_s2c_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(s2c_ENTER& a, s2c_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_ENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_ENTER& from) {
    s2c_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_ENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_ENTER";
  }
  protected:
  explicit s2c_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 player_id = 1;
  void clear_player_id();
  uint64_t player_id() const;
  void set_player_id(uint64_t value);
  private:
  uint64_t _internal_player_id() const;
  void _internal_set_player_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_BREAK_TILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_BREAK_TILE) */ {
 public:
  inline c2s_BREAK_TILE() : c2s_BREAK_TILE(nullptr) {}
  ~c2s_BREAK_TILE() override;
  explicit PROTOBUF_CONSTEXPR c2s_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_BREAK_TILE(const c2s_BREAK_TILE& from);
  c2s_BREAK_TILE(c2s_BREAK_TILE&& from) noexcept
    : c2s_BREAK_TILE() {
    *this = ::std::move(from);
  }

  inline c2s_BREAK_TILE& operator=(const c2s_BREAK_TILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_BREAK_TILE& operator=(c2s_BREAK_TILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_BREAK_TILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_BREAK_TILE* internal_default_instance() {
    return reinterpret_cast<const c2s_BREAK_TILE*>(
               &_c2s_BREAK_TILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(c2s_BREAK_TILE& a, c2s_BREAK_TILE& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_BREAK_TILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_BREAK_TILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_BREAK_TILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_BREAK_TILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_BREAK_TILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_BREAK_TILE& from) {
    c2s_BREAK_TILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_BREAK_TILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_BREAK_TILE";
  }
  protected:
  explicit c2s_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileXFieldNumber = 1,
    kTileYFieldNumber = 2,
  };
  // int32 tile_x = 1;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 2;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_BREAK_TILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_BREAK_TILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_BREAK_TILE) */ {
 public:
  inline s2c_BREAK_TILE() : s2c_BREAK_TILE(nullptr) {}
  ~s2c_BREAK_TILE() override;
  explicit PROTOBUF_CONSTEXPR s2c_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_BREAK_TILE(const s2c_BREAK_TILE& from);
  s2c_BREAK_TILE(s2c_BREAK_TILE&& from) noexcept
    : s2c_BREAK_TILE() {
    *this = ::std::move(from);
  }

  inline s2c_BREAK_TILE& operator=(const s2c_BREAK_TILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_BREAK_TILE& operator=(s2c_BREAK_TILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_BREAK_TILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_BREAK_TILE* internal_default_instance() {
    return reinterpret_cast<const s2c_BREAK_TILE*>(
               &_s2c_BREAK_TILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(s2c_BREAK_TILE& a, s2c_BREAK_TILE& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_BREAK_TILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_BREAK_TILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_BREAK_TILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_BREAK_TILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_BREAK_TILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_BREAK_TILE& from) {
    s2c_BREAK_TILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_BREAK_TILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_BREAK_TILE";
  }
  protected:
  explicit s2c_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kTileXFieldNumber = 2,
    kTileYFieldNumber = 3,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 tile_x = 2;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 3;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_BREAK_TILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_BREAK_TILE_WALL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_BREAK_TILE_WALL) */ {
 public:
  inline c2s_BREAK_TILE_WALL() : c2s_BREAK_TILE_WALL(nullptr) {}
  ~c2s_BREAK_TILE_WALL() override;
  explicit PROTOBUF_CONSTEXPR c2s_BREAK_TILE_WALL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_BREAK_TILE_WALL(const c2s_BREAK_TILE_WALL& from);
  c2s_BREAK_TILE_WALL(c2s_BREAK_TILE_WALL&& from) noexcept
    : c2s_BREAK_TILE_WALL() {
    *this = ::std::move(from);
  }

  inline c2s_BREAK_TILE_WALL& operator=(const c2s_BREAK_TILE_WALL& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_BREAK_TILE_WALL& operator=(c2s_BREAK_TILE_WALL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_BREAK_TILE_WALL& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_BREAK_TILE_WALL* internal_default_instance() {
    return reinterpret_cast<const c2s_BREAK_TILE_WALL*>(
               &_c2s_BREAK_TILE_WALL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(c2s_BREAK_TILE_WALL& a, c2s_BREAK_TILE_WALL& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_BREAK_TILE_WALL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_BREAK_TILE_WALL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_BREAK_TILE_WALL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_BREAK_TILE_WALL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_BREAK_TILE_WALL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_BREAK_TILE_WALL& from) {
    c2s_BREAK_TILE_WALL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_BREAK_TILE_WALL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_BREAK_TILE_WALL";
  }
  protected:
  explicit c2s_BREAK_TILE_WALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileXFieldNumber = 1,
    kTileYFieldNumber = 2,
  };
  // int32 tile_x = 1;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 2;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_BREAK_TILE_WALL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_BREAK_TILE_WALL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_BREAK_TILE_WALL) */ {
 public:
  inline s2c_BREAK_TILE_WALL() : s2c_BREAK_TILE_WALL(nullptr) {}
  ~s2c_BREAK_TILE_WALL() override;
  explicit PROTOBUF_CONSTEXPR s2c_BREAK_TILE_WALL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_BREAK_TILE_WALL(const s2c_BREAK_TILE_WALL& from);
  s2c_BREAK_TILE_WALL(s2c_BREAK_TILE_WALL&& from) noexcept
    : s2c_BREAK_TILE_WALL() {
    *this = ::std::move(from);
  }

  inline s2c_BREAK_TILE_WALL& operator=(const s2c_BREAK_TILE_WALL& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_BREAK_TILE_WALL& operator=(s2c_BREAK_TILE_WALL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_BREAK_TILE_WALL& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_BREAK_TILE_WALL* internal_default_instance() {
    return reinterpret_cast<const s2c_BREAK_TILE_WALL*>(
               &_s2c_BREAK_TILE_WALL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(s2c_BREAK_TILE_WALL& a, s2c_BREAK_TILE_WALL& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_BREAK_TILE_WALL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_BREAK_TILE_WALL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_BREAK_TILE_WALL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_BREAK_TILE_WALL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_BREAK_TILE_WALL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_BREAK_TILE_WALL& from) {
    s2c_BREAK_TILE_WALL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_BREAK_TILE_WALL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_BREAK_TILE_WALL";
  }
  protected:
  explicit s2c_BREAK_TILE_WALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kTileXFieldNumber = 2,
    kTileYFieldNumber = 3,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 tile_x = 2;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 3;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_BREAK_TILE_WALL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_PLACE_TILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_PLACE_TILE) */ {
 public:
  inline c2s_PLACE_TILE() : c2s_PLACE_TILE(nullptr) {}
  ~c2s_PLACE_TILE() override;
  explicit PROTOBUF_CONSTEXPR c2s_PLACE_TILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_PLACE_TILE(const c2s_PLACE_TILE& from);
  c2s_PLACE_TILE(c2s_PLACE_TILE&& from) noexcept
    : c2s_PLACE_TILE() {
    *this = ::std::move(from);
  }

  inline c2s_PLACE_TILE& operator=(const c2s_PLACE_TILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_PLACE_TILE& operator=(c2s_PLACE_TILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_PLACE_TILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_PLACE_TILE* internal_default_instance() {
    return reinterpret_cast<const c2s_PLACE_TILE*>(
               &_c2s_PLACE_TILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(c2s_PLACE_TILE& a, c2s_PLACE_TILE& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_PLACE_TILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_PLACE_TILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_PLACE_TILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_PLACE_TILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_PLACE_TILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_PLACE_TILE& from) {
    c2s_PLACE_TILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_PLACE_TILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_PLACE_TILE";
  }
  protected:
  explicit c2s_PLACE_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileKeyFieldNumber = 3,
    kTileXFieldNumber = 1,
    kTileYFieldNumber = 2,
  };
  // string tile_key = 3;
  void clear_tile_key();
  const std::string& tile_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_key();
  PROTOBUF_NODISCARD std::string* release_tile_key();
  void set_allocated_tile_key(std::string* tile_key);
  private:
  const std::string& _internal_tile_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_key(const std::string& value);
  std::string* _internal_mutable_tile_key();
  public:

  // int32 tile_x = 1;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 2;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_PLACE_TILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_key_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_PLACE_TILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_PLACE_TILE) */ {
 public:
  inline s2c_PLACE_TILE() : s2c_PLACE_TILE(nullptr) {}
  ~s2c_PLACE_TILE() override;
  explicit PROTOBUF_CONSTEXPR s2c_PLACE_TILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_PLACE_TILE(const s2c_PLACE_TILE& from);
  s2c_PLACE_TILE(s2c_PLACE_TILE&& from) noexcept
    : s2c_PLACE_TILE() {
    *this = ::std::move(from);
  }

  inline s2c_PLACE_TILE& operator=(const s2c_PLACE_TILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_PLACE_TILE& operator=(s2c_PLACE_TILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_PLACE_TILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_PLACE_TILE* internal_default_instance() {
    return reinterpret_cast<const s2c_PLACE_TILE*>(
               &_s2c_PLACE_TILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(s2c_PLACE_TILE& a, s2c_PLACE_TILE& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_PLACE_TILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_PLACE_TILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_PLACE_TILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_PLACE_TILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_PLACE_TILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_PLACE_TILE& from) {
    s2c_PLACE_TILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_PLACE_TILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_PLACE_TILE";
  }
  protected:
  explicit s2c_PLACE_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileKeyFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kTileXFieldNumber = 2,
    kTileYFieldNumber = 3,
  };
  // string tile_key = 4;
  void clear_tile_key();
  const std::string& tile_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_key();
  PROTOBUF_NODISCARD std::string* release_tile_key();
  void set_allocated_tile_key(std::string* tile_key);
  private:
  const std::string& _internal_tile_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_key(const std::string& value);
  std::string* _internal_mutable_tile_key();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 tile_x = 2;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 3;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_PLACE_TILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_key_;
    bool success_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_PLACE_TILE_WALL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_PLACE_TILE_WALL) */ {
 public:
  inline c2s_PLACE_TILE_WALL() : c2s_PLACE_TILE_WALL(nullptr) {}
  ~c2s_PLACE_TILE_WALL() override;
  explicit PROTOBUF_CONSTEXPR c2s_PLACE_TILE_WALL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_PLACE_TILE_WALL(const c2s_PLACE_TILE_WALL& from);
  c2s_PLACE_TILE_WALL(c2s_PLACE_TILE_WALL&& from) noexcept
    : c2s_PLACE_TILE_WALL() {
    *this = ::std::move(from);
  }

  inline c2s_PLACE_TILE_WALL& operator=(const c2s_PLACE_TILE_WALL& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_PLACE_TILE_WALL& operator=(c2s_PLACE_TILE_WALL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_PLACE_TILE_WALL& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_PLACE_TILE_WALL* internal_default_instance() {
    return reinterpret_cast<const c2s_PLACE_TILE_WALL*>(
               &_c2s_PLACE_TILE_WALL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(c2s_PLACE_TILE_WALL& a, c2s_PLACE_TILE_WALL& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_PLACE_TILE_WALL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_PLACE_TILE_WALL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_PLACE_TILE_WALL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_PLACE_TILE_WALL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_PLACE_TILE_WALL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_PLACE_TILE_WALL& from) {
    c2s_PLACE_TILE_WALL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_PLACE_TILE_WALL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_PLACE_TILE_WALL";
  }
  protected:
  explicit c2s_PLACE_TILE_WALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileKeyFieldNumber = 3,
    kTileXFieldNumber = 1,
    kTileYFieldNumber = 2,
  };
  // string tile_key = 3;
  void clear_tile_key();
  const std::string& tile_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_key();
  PROTOBUF_NODISCARD std::string* release_tile_key();
  void set_allocated_tile_key(std::string* tile_key);
  private:
  const std::string& _internal_tile_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_key(const std::string& value);
  std::string* _internal_mutable_tile_key();
  public:

  // int32 tile_x = 1;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 2;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_PLACE_TILE_WALL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_key_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_PLACE_TILE_WALL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_PLACE_TILE_WALL) */ {
 public:
  inline s2c_PLACE_TILE_WALL() : s2c_PLACE_TILE_WALL(nullptr) {}
  ~s2c_PLACE_TILE_WALL() override;
  explicit PROTOBUF_CONSTEXPR s2c_PLACE_TILE_WALL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_PLACE_TILE_WALL(const s2c_PLACE_TILE_WALL& from);
  s2c_PLACE_TILE_WALL(s2c_PLACE_TILE_WALL&& from) noexcept
    : s2c_PLACE_TILE_WALL() {
    *this = ::std::move(from);
  }

  inline s2c_PLACE_TILE_WALL& operator=(const s2c_PLACE_TILE_WALL& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_PLACE_TILE_WALL& operator=(s2c_PLACE_TILE_WALL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_PLACE_TILE_WALL& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_PLACE_TILE_WALL* internal_default_instance() {
    return reinterpret_cast<const s2c_PLACE_TILE_WALL*>(
               &_s2c_PLACE_TILE_WALL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(s2c_PLACE_TILE_WALL& a, s2c_PLACE_TILE_WALL& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_PLACE_TILE_WALL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_PLACE_TILE_WALL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_PLACE_TILE_WALL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_PLACE_TILE_WALL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_PLACE_TILE_WALL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_PLACE_TILE_WALL& from) {
    s2c_PLACE_TILE_WALL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_PLACE_TILE_WALL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_PLACE_TILE_WALL";
  }
  protected:
  explicit s2c_PLACE_TILE_WALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileKeyFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kTileXFieldNumber = 2,
    kTileYFieldNumber = 3,
  };
  // string tile_key = 4;
  void clear_tile_key();
  const std::string& tile_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_key();
  PROTOBUF_NODISCARD std::string* release_tile_key();
  void set_allocated_tile_key(std::string* tile_key);
  private:
  const std::string& _internal_tile_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_key(const std::string& value);
  std::string* _internal_mutable_tile_key();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 tile_x = 2;
  void clear_tile_x();
  int32_t tile_x() const;
  void set_tile_x(int32_t value);
  private:
  int32_t _internal_tile_x() const;
  void _internal_set_tile_x(int32_t value);
  public:

  // int32 tile_y = 3;
  void clear_tile_y();
  int32_t tile_y() const;
  void set_tile_y(int32_t value);
  private:
  int32_t _internal_tile_y() const;
  void _internal_set_tile_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_PLACE_TILE_WALL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_key_;
    bool success_;
    int32_t tile_x_;
    int32_t tile_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_MOVE) */ {
 public:
  inline c2s_MOVE() : c2s_MOVE(nullptr) {}
  ~c2s_MOVE() override;
  explicit PROTOBUF_CONSTEXPR c2s_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_MOVE(const c2s_MOVE& from);
  c2s_MOVE(c2s_MOVE&& from) noexcept
    : c2s_MOVE() {
    *this = ::std::move(from);
  }

  inline c2s_MOVE& operator=(const c2s_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_MOVE& operator=(c2s_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_MOVE* internal_default_instance() {
    return reinterpret_cast<const c2s_MOVE*>(
               &_c2s_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(c2s_MOVE& a, c2s_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_MOVE& from) {
    c2s_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_MOVE";
  }
  protected:
  explicit c2s_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWiilPosFieldNumber = 1,
    kObjPosFieldNumber = 2,
    kVelFieldNumber = 3,
    kScaleFieldNumber = 4,
    kAccelFieldNumber = 8,
    kStateFieldNumber = 5,
    kAnimDirFieldNumber = 6,
    kGroundFieldNumber = 7,
  };
  // .Protocol.Vec2 wiil_pos = 1;
  bool has_wiil_pos() const;
  private:
  bool _internal_has_wiil_pos() const;
  public:
  void clear_wiil_pos();
  const ::Protocol::Vec2& wiil_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_wiil_pos();
  ::Protocol::Vec2* mutable_wiil_pos();
  void set_allocated_wiil_pos(::Protocol::Vec2* wiil_pos);
  private:
  const ::Protocol::Vec2& _internal_wiil_pos() const;
  ::Protocol::Vec2* _internal_mutable_wiil_pos();
  public:
  void unsafe_arena_set_allocated_wiil_pos(
      ::Protocol::Vec2* wiil_pos);
  ::Protocol::Vec2* unsafe_arena_release_wiil_pos();

  // .Protocol.Vec2 obj_pos = 2;
  bool has_obj_pos() const;
  private:
  bool _internal_has_obj_pos() const;
  public:
  void clear_obj_pos();
  const ::Protocol::Vec2& obj_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_obj_pos();
  ::Protocol::Vec2* mutable_obj_pos();
  void set_allocated_obj_pos(::Protocol::Vec2* obj_pos);
  private:
  const ::Protocol::Vec2& _internal_obj_pos() const;
  ::Protocol::Vec2* _internal_mutable_obj_pos();
  public:
  void unsafe_arena_set_allocated_obj_pos(
      ::Protocol::Vec2* obj_pos);
  ::Protocol::Vec2* unsafe_arena_release_obj_pos();

  // .Protocol.Vec2 vel = 3;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Protocol::Vec2& vel() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_vel();
  ::Protocol::Vec2* mutable_vel();
  void set_allocated_vel(::Protocol::Vec2* vel);
  private:
  const ::Protocol::Vec2& _internal_vel() const;
  ::Protocol::Vec2* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Protocol::Vec2* vel);
  ::Protocol::Vec2* unsafe_arena_release_vel();

  // .Protocol.Vec2 scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::Protocol::Vec2& scale() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_scale();
  ::Protocol::Vec2* mutable_scale();
  void set_allocated_scale(::Protocol::Vec2* scale);
  private:
  const ::Protocol::Vec2& _internal_scale() const;
  ::Protocol::Vec2* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::Protocol::Vec2* scale);
  ::Protocol::Vec2* unsafe_arena_release_scale();

  // .Protocol.Vec2 accel = 8;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::Protocol::Vec2& accel() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_accel();
  ::Protocol::Vec2* mutable_accel();
  void set_allocated_accel(::Protocol::Vec2* accel);
  private:
  const ::Protocol::Vec2& _internal_accel() const;
  ::Protocol::Vec2* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::Protocol::Vec2* accel);
  ::Protocol::Vec2* unsafe_arena_release_accel();

  // .Protocol.PLAYER_STATE state = 5;
  void clear_state();
  ::Protocol::PLAYER_STATE state() const;
  void set_state(::Protocol::PLAYER_STATE value);
  private:
  ::Protocol::PLAYER_STATE _internal_state() const;
  void _internal_set_state(::Protocol::PLAYER_STATE value);
  public:

  // int32 anim_dir = 6;
  void clear_anim_dir();
  int32_t anim_dir() const;
  void set_anim_dir(int32_t value);
  private:
  int32_t _internal_anim_dir() const;
  void _internal_set_anim_dir(int32_t value);
  public:

  // bool ground = 7;
  void clear_ground();
  bool ground() const;
  void set_ground(bool value);
  private:
  bool _internal_ground() const;
  void _internal_set_ground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vec2* wiil_pos_;
    ::Protocol::Vec2* obj_pos_;
    ::Protocol::Vec2* vel_;
    ::Protocol::Vec2* scale_;
    ::Protocol::Vec2* accel_;
    int state_;
    int32_t anim_dir_;
    bool ground_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_MOVE) */ {
 public:
  inline s2c_MOVE() : s2c_MOVE(nullptr) {}
  ~s2c_MOVE() override;
  explicit PROTOBUF_CONSTEXPR s2c_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_MOVE(const s2c_MOVE& from);
  s2c_MOVE(s2c_MOVE&& from) noexcept
    : s2c_MOVE() {
    *this = ::std::move(from);
  }

  inline s2c_MOVE& operator=(const s2c_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_MOVE& operator=(s2c_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_MOVE* internal_default_instance() {
    return reinterpret_cast<const s2c_MOVE*>(
               &_s2c_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(s2c_MOVE& a, s2c_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_MOVE& from) {
    s2c_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_MOVE";
  }
  protected:
  explicit s2c_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPosFieldNumber = 2,
    kVelFieldNumber = 3,
    kWiilPosFieldNumber = 7,
    kAccelFieldNumber = 9,
    kObjIdFieldNumber = 1,
    kGroundFieldNumber = 4,
    kStateFieldNumber = 5,
    kTimeStampFieldNumber = 6,
    kAnimDirFieldNumber = 8,
  };
  // .Protocol.Vec2 obj_pos = 2;
  bool has_obj_pos() const;
  private:
  bool _internal_has_obj_pos() const;
  public:
  void clear_obj_pos();
  const ::Protocol::Vec2& obj_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_obj_pos();
  ::Protocol::Vec2* mutable_obj_pos();
  void set_allocated_obj_pos(::Protocol::Vec2* obj_pos);
  private:
  const ::Protocol::Vec2& _internal_obj_pos() const;
  ::Protocol::Vec2* _internal_mutable_obj_pos();
  public:
  void unsafe_arena_set_allocated_obj_pos(
      ::Protocol::Vec2* obj_pos);
  ::Protocol::Vec2* unsafe_arena_release_obj_pos();

  // .Protocol.Vec2 vel = 3;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Protocol::Vec2& vel() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_vel();
  ::Protocol::Vec2* mutable_vel();
  void set_allocated_vel(::Protocol::Vec2* vel);
  private:
  const ::Protocol::Vec2& _internal_vel() const;
  ::Protocol::Vec2* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Protocol::Vec2* vel);
  ::Protocol::Vec2* unsafe_arena_release_vel();

  // .Protocol.Vec2 wiil_pos = 7;
  bool has_wiil_pos() const;
  private:
  bool _internal_has_wiil_pos() const;
  public:
  void clear_wiil_pos();
  const ::Protocol::Vec2& wiil_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_wiil_pos();
  ::Protocol::Vec2* mutable_wiil_pos();
  void set_allocated_wiil_pos(::Protocol::Vec2* wiil_pos);
  private:
  const ::Protocol::Vec2& _internal_wiil_pos() const;
  ::Protocol::Vec2* _internal_mutable_wiil_pos();
  public:
  void unsafe_arena_set_allocated_wiil_pos(
      ::Protocol::Vec2* wiil_pos);
  ::Protocol::Vec2* unsafe_arena_release_wiil_pos();

  // .Protocol.Vec2 accel = 9;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::Protocol::Vec2& accel() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_accel();
  ::Protocol::Vec2* mutable_accel();
  void set_allocated_accel(::Protocol::Vec2* accel);
  private:
  const ::Protocol::Vec2& _internal_accel() const;
  ::Protocol::Vec2* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::Protocol::Vec2* accel);
  ::Protocol::Vec2* unsafe_arena_release_accel();

  // uint64 obj_id = 1;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // bool ground = 4;
  void clear_ground();
  bool ground() const;
  void set_ground(bool value);
  private:
  bool _internal_ground() const;
  void _internal_set_ground(bool value);
  public:

  // .Protocol.PLAYER_STATE state = 5;
  void clear_state();
  ::Protocol::PLAYER_STATE state() const;
  void set_state(::Protocol::PLAYER_STATE value);
  private:
  ::Protocol::PLAYER_STATE _internal_state() const;
  void _internal_set_state(::Protocol::PLAYER_STATE value);
  public:

  // uint64 time_stamp = 6;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // int32 anim_dir = 8;
  void clear_anim_dir();
  int32_t anim_dir() const;
  void set_anim_dir(int32_t value);
  private:
  int32_t _internal_anim_dir() const;
  void _internal_set_anim_dir(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vec2* obj_pos_;
    ::Protocol::Vec2* vel_;
    ::Protocol::Vec2* wiil_pos_;
    ::Protocol::Vec2* accel_;
    uint64_t obj_id_;
    bool ground_;
    int state_;
    uint64_t time_stamp_;
    int32_t anim_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_CREATE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_CREATE_ITEM) */ {
 public:
  inline c2s_CREATE_ITEM() : c2s_CREATE_ITEM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_CREATE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_CREATE_ITEM(const c2s_CREATE_ITEM& from);
  c2s_CREATE_ITEM(c2s_CREATE_ITEM&& from) noexcept
    : c2s_CREATE_ITEM() {
    *this = ::std::move(from);
  }

  inline c2s_CREATE_ITEM& operator=(const c2s_CREATE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_CREATE_ITEM& operator=(c2s_CREATE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_CREATE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_CREATE_ITEM* internal_default_instance() {
    return reinterpret_cast<const c2s_CREATE_ITEM*>(
               &_c2s_CREATE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(c2s_CREATE_ITEM& a, c2s_CREATE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_CREATE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_CREATE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_CREATE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_CREATE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_CREATE_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_CREATE_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_CREATE_ITEM";
  }
  protected:
  explicit c2s_CREATE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_CREATE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_CREATE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_CREATE_ITEM) */ {
 public:
  inline s2c_CREATE_ITEM() : s2c_CREATE_ITEM(nullptr) {}
  ~s2c_CREATE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR s2c_CREATE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_CREATE_ITEM(const s2c_CREATE_ITEM& from);
  s2c_CREATE_ITEM(s2c_CREATE_ITEM&& from) noexcept
    : s2c_CREATE_ITEM() {
    *this = ::std::move(from);
  }

  inline s2c_CREATE_ITEM& operator=(const s2c_CREATE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_CREATE_ITEM& operator=(s2c_CREATE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_CREATE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_CREATE_ITEM* internal_default_instance() {
    return reinterpret_cast<const s2c_CREATE_ITEM*>(
               &_s2c_CREATE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(s2c_CREATE_ITEM& a, s2c_CREATE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_CREATE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_CREATE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_CREATE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_CREATE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_CREATE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_CREATE_ITEM& from) {
    s2c_CREATE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_CREATE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_CREATE_ITEM";
  }
  protected:
  explicit s2c_CREATE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 3,
    kPosFieldNumber = 2,
    kObjIdFieldNumber = 1,
    kSectorFieldNumber = 4,
  };
  // string item_name = 3;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_NODISCARD std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // .Protocol.Vec2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Vec2& pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_pos();
  ::Protocol::Vec2* mutable_pos();
  void set_allocated_pos(::Protocol::Vec2* pos);
  private:
  const ::Protocol::Vec2& _internal_pos() const;
  ::Protocol::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Vec2* pos);
  ::Protocol::Vec2* unsafe_arena_release_pos();

  // uint64 obj_id = 1;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // int32 sector = 4;
  void clear_sector();
  int32_t sector() const;
  void set_sector(int32_t value);
  private:
  int32_t _internal_sector() const;
  void _internal_set_sector(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_CREATE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
    ::Protocol::Vec2* pos_;
    uint64_t obj_id_;
    int32_t sector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_GET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_GET_ITEM) */ {
 public:
  inline c2s_GET_ITEM() : c2s_GET_ITEM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_GET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_GET_ITEM(const c2s_GET_ITEM& from);
  c2s_GET_ITEM(c2s_GET_ITEM&& from) noexcept
    : c2s_GET_ITEM() {
    *this = ::std::move(from);
  }

  inline c2s_GET_ITEM& operator=(const c2s_GET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_GET_ITEM& operator=(c2s_GET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_GET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_GET_ITEM* internal_default_instance() {
    return reinterpret_cast<const c2s_GET_ITEM*>(
               &_c2s_GET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(c2s_GET_ITEM& a, c2s_GET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_GET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_GET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_GET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_GET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_GET_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_GET_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_GET_ITEM";
  }
  protected:
  explicit c2s_GET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_GET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_GET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_GET_ITEM) */ {
 public:
  inline s2c_GET_ITEM() : s2c_GET_ITEM(nullptr) {}
  ~s2c_GET_ITEM() override;
  explicit PROTOBUF_CONSTEXPR s2c_GET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_GET_ITEM(const s2c_GET_ITEM& from);
  s2c_GET_ITEM(s2c_GET_ITEM&& from) noexcept
    : s2c_GET_ITEM() {
    *this = ::std::move(from);
  }

  inline s2c_GET_ITEM& operator=(const s2c_GET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_GET_ITEM& operator=(s2c_GET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_GET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_GET_ITEM* internal_default_instance() {
    return reinterpret_cast<const s2c_GET_ITEM*>(
               &_s2c_GET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(s2c_GET_ITEM& a, s2c_GET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_GET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_GET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_GET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_GET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_GET_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_GET_ITEM& from) {
    s2c_GET_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_GET_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_GET_ITEM";
  }
  protected:
  explicit s2c_GET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 3,
    kPosFieldNumber = 2,
    kObjIdFieldNumber = 1,
    kItemIdFieldNumber = 4,
    kSectorFieldNumber = 5,
  };
  // string item_name = 3;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_NODISCARD std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // .Protocol.Vec2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Vec2& pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_pos();
  ::Protocol::Vec2* mutable_pos();
  void set_allocated_pos(::Protocol::Vec2* pos);
  private:
  const ::Protocol::Vec2& _internal_pos() const;
  ::Protocol::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Vec2* pos);
  ::Protocol::Vec2* unsafe_arena_release_pos();

  // uint64 obj_id = 1;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // uint64 item_id = 4;
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // int32 sector = 5;
  void clear_sector();
  int32_t sector() const;
  void set_sector(int32_t value);
  private:
  int32_t _internal_sector() const;
  void _internal_set_sector(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_GET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
    ::Protocol::Vec2* pos_;
    uint64_t obj_id_;
    uint64_t item_id_;
    int32_t sector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_INPUT_KEY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_INPUT_KEY) */ {
 public:
  inline c2s_INPUT_KEY() : c2s_INPUT_KEY(nullptr) {}
  ~c2s_INPUT_KEY() override;
  explicit PROTOBUF_CONSTEXPR c2s_INPUT_KEY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_INPUT_KEY(const c2s_INPUT_KEY& from);
  c2s_INPUT_KEY(c2s_INPUT_KEY&& from) noexcept
    : c2s_INPUT_KEY() {
    *this = ::std::move(from);
  }

  inline c2s_INPUT_KEY& operator=(const c2s_INPUT_KEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_INPUT_KEY& operator=(c2s_INPUT_KEY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_INPUT_KEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_INPUT_KEY* internal_default_instance() {
    return reinterpret_cast<const c2s_INPUT_KEY*>(
               &_c2s_INPUT_KEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(c2s_INPUT_KEY& a, c2s_INPUT_KEY& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_INPUT_KEY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_INPUT_KEY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_INPUT_KEY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_INPUT_KEY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_INPUT_KEY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_INPUT_KEY& from) {
    c2s_INPUT_KEY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_INPUT_KEY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_INPUT_KEY";
  }
  protected:
  explicit c2s_INPUT_KEY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVkKeyFieldNumber = 1,
    kKeyStateFieldNumber = 2,
  };
  // int32 vk_key = 1;
  void clear_vk_key();
  int32_t vk_key() const;
  void set_vk_key(int32_t value);
  private:
  int32_t _internal_vk_key() const;
  void _internal_set_vk_key(int32_t value);
  public:

  // int32 key_state = 2;
  void clear_key_state();
  int32_t key_state() const;
  void set_key_state(int32_t value);
  private:
  int32_t _internal_key_state() const;
  void _internal_set_key_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_INPUT_KEY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t vk_key_;
    int32_t key_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_INPUT_KEY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.s2c_INPUT_KEY) */ {
 public:
  inline s2c_INPUT_KEY() : s2c_INPUT_KEY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR s2c_INPUT_KEY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_INPUT_KEY(const s2c_INPUT_KEY& from);
  s2c_INPUT_KEY(s2c_INPUT_KEY&& from) noexcept
    : s2c_INPUT_KEY() {
    *this = ::std::move(from);
  }

  inline s2c_INPUT_KEY& operator=(const s2c_INPUT_KEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_INPUT_KEY& operator=(s2c_INPUT_KEY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_INPUT_KEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_INPUT_KEY* internal_default_instance() {
    return reinterpret_cast<const s2c_INPUT_KEY*>(
               &_s2c_INPUT_KEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(s2c_INPUT_KEY& a, s2c_INPUT_KEY& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_INPUT_KEY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_INPUT_KEY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_INPUT_KEY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_INPUT_KEY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const s2c_INPUT_KEY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const s2c_INPUT_KEY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_INPUT_KEY";
  }
  protected:
  explicit s2c_INPUT_KEY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.s2c_INPUT_KEY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_TRY_GET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_TRY_GET_ITEM) */ {
 public:
  inline c2s_TRY_GET_ITEM() : c2s_TRY_GET_ITEM(nullptr) {}
  ~c2s_TRY_GET_ITEM() override;
  explicit PROTOBUF_CONSTEXPR c2s_TRY_GET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_TRY_GET_ITEM(const c2s_TRY_GET_ITEM& from);
  c2s_TRY_GET_ITEM(c2s_TRY_GET_ITEM&& from) noexcept
    : c2s_TRY_GET_ITEM() {
    *this = ::std::move(from);
  }

  inline c2s_TRY_GET_ITEM& operator=(const c2s_TRY_GET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_TRY_GET_ITEM& operator=(c2s_TRY_GET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_TRY_GET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_TRY_GET_ITEM* internal_default_instance() {
    return reinterpret_cast<const c2s_TRY_GET_ITEM*>(
               &_c2s_TRY_GET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(c2s_TRY_GET_ITEM& a, c2s_TRY_GET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_TRY_GET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_TRY_GET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_TRY_GET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_TRY_GET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_TRY_GET_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_TRY_GET_ITEM& from) {
    c2s_TRY_GET_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_TRY_GET_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_TRY_GET_ITEM";
  }
  protected:
  explicit c2s_TRY_GET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPosFieldNumber = 1,
    kTimeStampFieldNumber = 2,
  };
  // .Protocol.Vec2 obj_pos = 1;
  bool has_obj_pos() const;
  private:
  bool _internal_has_obj_pos() const;
  public:
  void clear_obj_pos();
  const ::Protocol::Vec2& obj_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_obj_pos();
  ::Protocol::Vec2* mutable_obj_pos();
  void set_allocated_obj_pos(::Protocol::Vec2* obj_pos);
  private:
  const ::Protocol::Vec2& _internal_obj_pos() const;
  ::Protocol::Vec2* _internal_mutable_obj_pos();
  public:
  void unsafe_arena_set_allocated_obj_pos(
      ::Protocol::Vec2* obj_pos);
  ::Protocol::Vec2* unsafe_arena_release_obj_pos();

  // uint64 time_stamp = 2;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_TRY_GET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vec2* obj_pos_;
    uint64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_TRY_GET_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.s2c_TRY_GET_ITEM) */ {
 public:
  inline s2c_TRY_GET_ITEM() : s2c_TRY_GET_ITEM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR s2c_TRY_GET_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_TRY_GET_ITEM(const s2c_TRY_GET_ITEM& from);
  s2c_TRY_GET_ITEM(s2c_TRY_GET_ITEM&& from) noexcept
    : s2c_TRY_GET_ITEM() {
    *this = ::std::move(from);
  }

  inline s2c_TRY_GET_ITEM& operator=(const s2c_TRY_GET_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_TRY_GET_ITEM& operator=(s2c_TRY_GET_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_TRY_GET_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_TRY_GET_ITEM* internal_default_instance() {
    return reinterpret_cast<const s2c_TRY_GET_ITEM*>(
               &_s2c_TRY_GET_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(s2c_TRY_GET_ITEM& a, s2c_TRY_GET_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_TRY_GET_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_TRY_GET_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_TRY_GET_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_TRY_GET_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const s2c_TRY_GET_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const s2c_TRY_GET_ITEM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_TRY_GET_ITEM";
  }
  protected:
  explicit s2c_TRY_GET_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.s2c_TRY_GET_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_TRY_NEW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_TRY_NEW_ROOM) */ {
 public:
  inline c2s_TRY_NEW_ROOM() : c2s_TRY_NEW_ROOM(nullptr) {}
  ~c2s_TRY_NEW_ROOM() override;
  explicit PROTOBUF_CONSTEXPR c2s_TRY_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_TRY_NEW_ROOM(const c2s_TRY_NEW_ROOM& from);
  c2s_TRY_NEW_ROOM(c2s_TRY_NEW_ROOM&& from) noexcept
    : c2s_TRY_NEW_ROOM() {
    *this = ::std::move(from);
  }

  inline c2s_TRY_NEW_ROOM& operator=(const c2s_TRY_NEW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_TRY_NEW_ROOM& operator=(c2s_TRY_NEW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_TRY_NEW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_TRY_NEW_ROOM* internal_default_instance() {
    return reinterpret_cast<const c2s_TRY_NEW_ROOM*>(
               &_c2s_TRY_NEW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(c2s_TRY_NEW_ROOM& a, c2s_TRY_NEW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_TRY_NEW_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_TRY_NEW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_TRY_NEW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_TRY_NEW_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_TRY_NEW_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_TRY_NEW_ROOM& from) {
    c2s_TRY_NEW_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_TRY_NEW_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_TRY_NEW_ROOM";
  }
  protected:
  explicit c2s_TRY_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurSectorNumFieldNumber = 1,
    kNextSectorNumFieldNumber = 2,
  };
  // int32 cur_sector_num = 1;
  void clear_cur_sector_num();
  int32_t cur_sector_num() const;
  void set_cur_sector_num(int32_t value);
  private:
  int32_t _internal_cur_sector_num() const;
  void _internal_set_cur_sector_num(int32_t value);
  public:

  // int32 next_sector_num = 2;
  void clear_next_sector_num();
  int32_t next_sector_num() const;
  void set_next_sector_num(int32_t value);
  private:
  int32_t _internal_next_sector_num() const;
  void _internal_set_next_sector_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_TRY_NEW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cur_sector_num_;
    int32_t next_sector_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_TRY_NEW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_TRY_NEW_ROOM) */ {
 public:
  inline s2c_TRY_NEW_ROOM() : s2c_TRY_NEW_ROOM(nullptr) {}
  ~s2c_TRY_NEW_ROOM() override;
  explicit PROTOBUF_CONSTEXPR s2c_TRY_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_TRY_NEW_ROOM(const s2c_TRY_NEW_ROOM& from);
  s2c_TRY_NEW_ROOM(s2c_TRY_NEW_ROOM&& from) noexcept
    : s2c_TRY_NEW_ROOM() {
    *this = ::std::move(from);
  }

  inline s2c_TRY_NEW_ROOM& operator=(const s2c_TRY_NEW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_TRY_NEW_ROOM& operator=(s2c_TRY_NEW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_TRY_NEW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_TRY_NEW_ROOM* internal_default_instance() {
    return reinterpret_cast<const s2c_TRY_NEW_ROOM*>(
               &_s2c_TRY_NEW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(s2c_TRY_NEW_ROOM& a, s2c_TRY_NEW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_TRY_NEW_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_TRY_NEW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_TRY_NEW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_TRY_NEW_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_TRY_NEW_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_TRY_NEW_ROOM& from) {
    s2c_TRY_NEW_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_TRY_NEW_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_TRY_NEW_ROOM";
  }
  protected:
  explicit s2c_TRY_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurSectorNumFieldNumber = 1,
    kNextSectorNumFieldNumber = 2,
  };
  // int32 cur_sector_num = 1;
  void clear_cur_sector_num();
  int32_t cur_sector_num() const;
  void set_cur_sector_num(int32_t value);
  private:
  int32_t _internal_cur_sector_num() const;
  void _internal_set_cur_sector_num(int32_t value);
  public:

  // int32 next_sector_num = 2;
  void clear_next_sector_num();
  int32_t next_sector_num() const;
  void set_next_sector_num(int32_t value);
  private:
  int32_t _internal_next_sector_num() const;
  void _internal_set_next_sector_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_TRY_NEW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cur_sector_num_;
    int32_t next_sector_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_ARRIVE_NEW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_ARRIVE_NEW_ROOM) */ {
 public:
  inline c2s_ARRIVE_NEW_ROOM() : c2s_ARRIVE_NEW_ROOM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_ARRIVE_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_ARRIVE_NEW_ROOM(const c2s_ARRIVE_NEW_ROOM& from);
  c2s_ARRIVE_NEW_ROOM(c2s_ARRIVE_NEW_ROOM&& from) noexcept
    : c2s_ARRIVE_NEW_ROOM() {
    *this = ::std::move(from);
  }

  inline c2s_ARRIVE_NEW_ROOM& operator=(const c2s_ARRIVE_NEW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_ARRIVE_NEW_ROOM& operator=(c2s_ARRIVE_NEW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_ARRIVE_NEW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_ARRIVE_NEW_ROOM* internal_default_instance() {
    return reinterpret_cast<const c2s_ARRIVE_NEW_ROOM*>(
               &_c2s_ARRIVE_NEW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(c2s_ARRIVE_NEW_ROOM& a, c2s_ARRIVE_NEW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_ARRIVE_NEW_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_ARRIVE_NEW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_ARRIVE_NEW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_ARRIVE_NEW_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_ARRIVE_NEW_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_ARRIVE_NEW_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_ARRIVE_NEW_ROOM";
  }
  protected:
  explicit c2s_ARRIVE_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_ARRIVE_NEW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_ARRIVE_NEW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.s2c_ARRIVE_NEW_ROOM) */ {
 public:
  inline s2c_ARRIVE_NEW_ROOM() : s2c_ARRIVE_NEW_ROOM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR s2c_ARRIVE_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_ARRIVE_NEW_ROOM(const s2c_ARRIVE_NEW_ROOM& from);
  s2c_ARRIVE_NEW_ROOM(s2c_ARRIVE_NEW_ROOM&& from) noexcept
    : s2c_ARRIVE_NEW_ROOM() {
    *this = ::std::move(from);
  }

  inline s2c_ARRIVE_NEW_ROOM& operator=(const s2c_ARRIVE_NEW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_ARRIVE_NEW_ROOM& operator=(s2c_ARRIVE_NEW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_ARRIVE_NEW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_ARRIVE_NEW_ROOM* internal_default_instance() {
    return reinterpret_cast<const s2c_ARRIVE_NEW_ROOM*>(
               &_s2c_ARRIVE_NEW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(s2c_ARRIVE_NEW_ROOM& a, s2c_ARRIVE_NEW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_ARRIVE_NEW_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_ARRIVE_NEW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_ARRIVE_NEW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_ARRIVE_NEW_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const s2c_ARRIVE_NEW_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const s2c_ARRIVE_NEW_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_ARRIVE_NEW_ROOM";
  }
  protected:
  explicit s2c_ARRIVE_NEW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.s2c_ARRIVE_NEW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_APPEAR_NEW_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.c2s_APPEAR_NEW_OBJECT) */ {
 public:
  inline c2s_APPEAR_NEW_OBJECT() : c2s_APPEAR_NEW_OBJECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR c2s_APPEAR_NEW_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_APPEAR_NEW_OBJECT(const c2s_APPEAR_NEW_OBJECT& from);
  c2s_APPEAR_NEW_OBJECT(c2s_APPEAR_NEW_OBJECT&& from) noexcept
    : c2s_APPEAR_NEW_OBJECT() {
    *this = ::std::move(from);
  }

  inline c2s_APPEAR_NEW_OBJECT& operator=(const c2s_APPEAR_NEW_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_APPEAR_NEW_OBJECT& operator=(c2s_APPEAR_NEW_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_APPEAR_NEW_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_APPEAR_NEW_OBJECT* internal_default_instance() {
    return reinterpret_cast<const c2s_APPEAR_NEW_OBJECT*>(
               &_c2s_APPEAR_NEW_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(c2s_APPEAR_NEW_OBJECT& a, c2s_APPEAR_NEW_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_APPEAR_NEW_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_APPEAR_NEW_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_APPEAR_NEW_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_APPEAR_NEW_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const c2s_APPEAR_NEW_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const c2s_APPEAR_NEW_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_APPEAR_NEW_OBJECT";
  }
  protected:
  explicit c2s_APPEAR_NEW_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.c2s_APPEAR_NEW_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_APPEAR_NEW_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_APPEAR_NEW_OBJECT) */ {
 public:
  inline s2c_APPEAR_NEW_OBJECT() : s2c_APPEAR_NEW_OBJECT(nullptr) {}
  ~s2c_APPEAR_NEW_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR s2c_APPEAR_NEW_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_APPEAR_NEW_OBJECT(const s2c_APPEAR_NEW_OBJECT& from);
  s2c_APPEAR_NEW_OBJECT(s2c_APPEAR_NEW_OBJECT&& from) noexcept
    : s2c_APPEAR_NEW_OBJECT() {
    *this = ::std::move(from);
  }

  inline s2c_APPEAR_NEW_OBJECT& operator=(const s2c_APPEAR_NEW_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_APPEAR_NEW_OBJECT& operator=(s2c_APPEAR_NEW_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_APPEAR_NEW_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_APPEAR_NEW_OBJECT* internal_default_instance() {
    return reinterpret_cast<const s2c_APPEAR_NEW_OBJECT*>(
               &_s2c_APPEAR_NEW_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(s2c_APPEAR_NEW_OBJECT& a, s2c_APPEAR_NEW_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_APPEAR_NEW_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_APPEAR_NEW_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_APPEAR_NEW_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_APPEAR_NEW_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_APPEAR_NEW_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_APPEAR_NEW_OBJECT& from) {
    s2c_APPEAR_NEW_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_APPEAR_NEW_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_APPEAR_NEW_OBJECT";
  }
  protected:
  explicit s2c_APPEAR_NEW_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjNameFieldNumber = 4,
    kAppearPosFieldNumber = 5,
    kIsPlayerFieldNumber = 1,
    kSectorFieldNumber = 2,
    kObjIdFieldNumber = 3,
    kTimeStampFieldNumber = 6,
  };
  // string obj_name = 4;
  void clear_obj_name();
  const std::string& obj_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obj_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obj_name();
  PROTOBUF_NODISCARD std::string* release_obj_name();
  void set_allocated_obj_name(std::string* obj_name);
  private:
  const std::string& _internal_obj_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_name(const std::string& value);
  std::string* _internal_mutable_obj_name();
  public:

  // .Protocol.Vec2 appear_pos = 5;
  bool has_appear_pos() const;
  private:
  bool _internal_has_appear_pos() const;
  public:
  void clear_appear_pos();
  const ::Protocol::Vec2& appear_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_appear_pos();
  ::Protocol::Vec2* mutable_appear_pos();
  void set_allocated_appear_pos(::Protocol::Vec2* appear_pos);
  private:
  const ::Protocol::Vec2& _internal_appear_pos() const;
  ::Protocol::Vec2* _internal_mutable_appear_pos();
  public:
  void unsafe_arena_set_allocated_appear_pos(
      ::Protocol::Vec2* appear_pos);
  ::Protocol::Vec2* unsafe_arena_release_appear_pos();

  // bool is_player = 1;
  void clear_is_player();
  bool is_player() const;
  void set_is_player(bool value);
  private:
  bool _internal_is_player() const;
  void _internal_set_is_player(bool value);
  public:

  // uint32 sector = 2;
  void clear_sector();
  uint32_t sector() const;
  void set_sector(uint32_t value);
  private:
  uint32_t _internal_sector() const;
  void _internal_set_sector(uint32_t value);
  public:

  // uint64 obj_id = 3;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // uint64 time_stamp = 6;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_APPEAR_NEW_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_name_;
    ::Protocol::Vec2* appear_pos_;
    bool is_player_;
    uint32_t sector_;
    uint64_t obj_id_;
    uint64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_LEAVE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_LEAVE_OBJECT) */ {
 public:
  inline c2s_LEAVE_OBJECT() : c2s_LEAVE_OBJECT(nullptr) {}
  ~c2s_LEAVE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR c2s_LEAVE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_LEAVE_OBJECT(const c2s_LEAVE_OBJECT& from);
  c2s_LEAVE_OBJECT(c2s_LEAVE_OBJECT&& from) noexcept
    : c2s_LEAVE_OBJECT() {
    *this = ::std::move(from);
  }

  inline c2s_LEAVE_OBJECT& operator=(const c2s_LEAVE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_LEAVE_OBJECT& operator=(c2s_LEAVE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_LEAVE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_LEAVE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const c2s_LEAVE_OBJECT*>(
               &_c2s_LEAVE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(c2s_LEAVE_OBJECT& a, c2s_LEAVE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_LEAVE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_LEAVE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_LEAVE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_LEAVE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_LEAVE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_LEAVE_OBJECT& from) {
    c2s_LEAVE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_LEAVE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_LEAVE_OBJECT";
  }
  protected:
  explicit c2s_LEAVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 2,
    kIsPlayerFieldNumber = 1,
    kSectorFieldNumber = 3,
  };
  // uint64 obj_id = 2;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // bool is_player = 1;
  void clear_is_player();
  bool is_player() const;
  void set_is_player(bool value);
  private:
  bool _internal_is_player() const;
  void _internal_set_is_player(bool value);
  public:

  // int32 sector = 3;
  void clear_sector();
  int32_t sector() const;
  void set_sector(int32_t value);
  private:
  int32_t _internal_sector() const;
  void _internal_set_sector(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.c2s_LEAVE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t obj_id_;
    bool is_player_;
    int32_t sector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_LEAVE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_LEAVE_OBJECT) */ {
 public:
  inline s2c_LEAVE_OBJECT() : s2c_LEAVE_OBJECT(nullptr) {}
  ~s2c_LEAVE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR s2c_LEAVE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_LEAVE_OBJECT(const s2c_LEAVE_OBJECT& from);
  s2c_LEAVE_OBJECT(s2c_LEAVE_OBJECT&& from) noexcept
    : s2c_LEAVE_OBJECT() {
    *this = ::std::move(from);
  }

  inline s2c_LEAVE_OBJECT& operator=(const s2c_LEAVE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_LEAVE_OBJECT& operator=(s2c_LEAVE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_LEAVE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_LEAVE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const s2c_LEAVE_OBJECT*>(
               &_s2c_LEAVE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(s2c_LEAVE_OBJECT& a, s2c_LEAVE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_LEAVE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_LEAVE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_LEAVE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_LEAVE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_LEAVE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_LEAVE_OBJECT& from) {
    s2c_LEAVE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_LEAVE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_LEAVE_OBJECT";
  }
  protected:
  explicit s2c_LEAVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 2,
    kIsPlayerFieldNumber = 1,
    kSectorFieldNumber = 3,
  };
  // uint64 obj_id = 2;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // bool is_player = 1;
  void clear_is_player();
  bool is_player() const;
  void set_is_player(bool value);
  private:
  bool _internal_is_player() const;
  void _internal_set_is_player(bool value);
  public:

  // int32 sector = 3;
  void clear_sector();
  int32_t sector() const;
  void set_sector(int32_t value);
  private:
  int32_t _internal_sector() const;
  void _internal_set_sector(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_LEAVE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t obj_id_;
    bool is_player_;
    int32_t sector_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class c2s_CREATE_MISSILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.c2s_CREATE_MISSILE) */ {
 public:
  inline c2s_CREATE_MISSILE() : c2s_CREATE_MISSILE(nullptr) {}
  ~c2s_CREATE_MISSILE() override;
  explicit PROTOBUF_CONSTEXPR c2s_CREATE_MISSILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  c2s_CREATE_MISSILE(const c2s_CREATE_MISSILE& from);
  c2s_CREATE_MISSILE(c2s_CREATE_MISSILE&& from) noexcept
    : c2s_CREATE_MISSILE() {
    *this = ::std::move(from);
  }

  inline c2s_CREATE_MISSILE& operator=(const c2s_CREATE_MISSILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline c2s_CREATE_MISSILE& operator=(c2s_CREATE_MISSILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const c2s_CREATE_MISSILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const c2s_CREATE_MISSILE* internal_default_instance() {
    return reinterpret_cast<const c2s_CREATE_MISSILE*>(
               &_c2s_CREATE_MISSILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(c2s_CREATE_MISSILE& a, c2s_CREATE_MISSILE& b) {
    a.Swap(&b);
  }
  inline void Swap(c2s_CREATE_MISSILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(c2s_CREATE_MISSILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  c2s_CREATE_MISSILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<c2s_CREATE_MISSILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const c2s_CREATE_MISSILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const c2s_CREATE_MISSILE& from) {
    c2s_CREATE_MISSILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c2s_CREATE_MISSILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.c2s_CREATE_MISSILE";
  }
  protected:
  explicit c2s_CREATE_MISSILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPosFieldNumber = 1,
  };
  // .Protocol.Vec2 obj_pos = 1;
  bool has_obj_pos() const;
  private:
  bool _internal_has_obj_pos() const;
  public:
  void clear_obj_pos();
  const ::Protocol::Vec2& obj_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_obj_pos();
  ::Protocol::Vec2* mutable_obj_pos();
  void set_allocated_obj_pos(::Protocol::Vec2* obj_pos);
  private:
  const ::Protocol::Vec2& _internal_obj_pos() const;
  ::Protocol::Vec2* _internal_mutable_obj_pos();
  public:
  void unsafe_arena_set_allocated_obj_pos(
      ::Protocol::Vec2* obj_pos);
  ::Protocol::Vec2* unsafe_arena_release_obj_pos();

  // @@protoc_insertion_point(class_scope:Protocol.c2s_CREATE_MISSILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vec2* obj_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class s2c_CREATE_MISSILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.s2c_CREATE_MISSILE) */ {
 public:
  inline s2c_CREATE_MISSILE() : s2c_CREATE_MISSILE(nullptr) {}
  ~s2c_CREATE_MISSILE() override;
  explicit PROTOBUF_CONSTEXPR s2c_CREATE_MISSILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2c_CREATE_MISSILE(const s2c_CREATE_MISSILE& from);
  s2c_CREATE_MISSILE(s2c_CREATE_MISSILE&& from) noexcept
    : s2c_CREATE_MISSILE() {
    *this = ::std::move(from);
  }

  inline s2c_CREATE_MISSILE& operator=(const s2c_CREATE_MISSILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2c_CREATE_MISSILE& operator=(s2c_CREATE_MISSILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2c_CREATE_MISSILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2c_CREATE_MISSILE* internal_default_instance() {
    return reinterpret_cast<const s2c_CREATE_MISSILE*>(
               &_s2c_CREATE_MISSILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(s2c_CREATE_MISSILE& a, s2c_CREATE_MISSILE& b) {
    a.Swap(&b);
  }
  inline void Swap(s2c_CREATE_MISSILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2c_CREATE_MISSILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s2c_CREATE_MISSILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s2c_CREATE_MISSILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2c_CREATE_MISSILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s2c_CREATE_MISSILE& from) {
    s2c_CREATE_MISSILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2c_CREATE_MISSILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.s2c_CREATE_MISSILE";
  }
  protected:
  explicit s2c_CREATE_MISSILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPosFieldNumber = 2,
    kObjIdFieldNumber = 1,
    kTimeStampFieldNumber = 3,
  };
  // .Protocol.Vec2 obj_pos = 2;
  bool has_obj_pos() const;
  private:
  bool _internal_has_obj_pos() const;
  public:
  void clear_obj_pos();
  const ::Protocol::Vec2& obj_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vec2* release_obj_pos();
  ::Protocol::Vec2* mutable_obj_pos();
  void set_allocated_obj_pos(::Protocol::Vec2* obj_pos);
  private:
  const ::Protocol::Vec2& _internal_obj_pos() const;
  ::Protocol::Vec2* _internal_mutable_obj_pos();
  public:
  void unsafe_arena_set_allocated_obj_pos(
      ::Protocol::Vec2* obj_pos);
  ::Protocol::Vec2* unsafe_arena_release_obj_pos();

  // uint64 obj_id = 1;
  void clear_obj_id();
  uint64_t obj_id() const;
  void set_obj_id(uint64_t value);
  private:
  uint64_t _internal_obj_id() const;
  void _internal_set_obj_id(uint64_t value);
  public:

  // uint64 time_stamp = 3;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.s2c_CREATE_MISSILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vec2* obj_pos_;
    uint64_t obj_id_;
    uint64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// c2s_LOGIN

// -------------------------------------------------------------------

// s2c_LOGIN

// int32 seed = 1;
inline void s2c_LOGIN::clear_seed() {
  _impl_.seed_ = 0;
}
inline int32_t s2c_LOGIN::_internal_seed() const {
  return _impl_.seed_;
}
inline int32_t s2c_LOGIN::seed() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_LOGIN.seed)
  return _internal_seed();
}
inline void s2c_LOGIN::_internal_set_seed(int32_t value) {
  
  _impl_.seed_ = value;
}
inline void s2c_LOGIN::set_seed(int32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_LOGIN.seed)
}

// uint64 id = 2;
inline void s2c_LOGIN::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t s2c_LOGIN::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t s2c_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_LOGIN.id)
  return _internal_id();
}
inline void s2c_LOGIN::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void s2c_LOGIN::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_LOGIN.id)
}

// -------------------------------------------------------------------

// c2s_ENTER

// -------------------------------------------------------------------

// s2c_ENTER

// uint64 player_id = 1;
inline void s2c_ENTER::clear_player_id() {
  _impl_.player_id_ = uint64_t{0u};
}
inline uint64_t s2c_ENTER::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint64_t s2c_ENTER::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_ENTER.player_id)
  return _internal_player_id();
}
inline void s2c_ENTER::_internal_set_player_id(uint64_t value) {
  
  _impl_.player_id_ = value;
}
inline void s2c_ENTER::set_player_id(uint64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_ENTER.player_id)
}

// -------------------------------------------------------------------

// c2s_BREAK_TILE

// int32 tile_x = 1;
inline void c2s_BREAK_TILE::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t c2s_BREAK_TILE::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t c2s_BREAK_TILE::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_BREAK_TILE.tile_x)
  return _internal_tile_x();
}
inline void c2s_BREAK_TILE::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void c2s_BREAK_TILE::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_BREAK_TILE.tile_x)
}

// int32 tile_y = 2;
inline void c2s_BREAK_TILE::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t c2s_BREAK_TILE::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t c2s_BREAK_TILE::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_BREAK_TILE.tile_y)
  return _internal_tile_y();
}
inline void c2s_BREAK_TILE::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void c2s_BREAK_TILE::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_BREAK_TILE.tile_y)
}

// -------------------------------------------------------------------

// s2c_BREAK_TILE

// bool success = 1;
inline void s2c_BREAK_TILE::clear_success() {
  _impl_.success_ = false;
}
inline bool s2c_BREAK_TILE::_internal_success() const {
  return _impl_.success_;
}
inline bool s2c_BREAK_TILE::success() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE.success)
  return _internal_success();
}
inline void s2c_BREAK_TILE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void s2c_BREAK_TILE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE.success)
}

// int32 tile_x = 2;
inline void s2c_BREAK_TILE::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t s2c_BREAK_TILE::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t s2c_BREAK_TILE::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE.tile_x)
  return _internal_tile_x();
}
inline void s2c_BREAK_TILE::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void s2c_BREAK_TILE::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE.tile_x)
}

// int32 tile_y = 3;
inline void s2c_BREAK_TILE::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t s2c_BREAK_TILE::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t s2c_BREAK_TILE::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE.tile_y)
  return _internal_tile_y();
}
inline void s2c_BREAK_TILE::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void s2c_BREAK_TILE::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE.tile_y)
}

// -------------------------------------------------------------------

// c2s_BREAK_TILE_WALL

// int32 tile_x = 1;
inline void c2s_BREAK_TILE_WALL::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t c2s_BREAK_TILE_WALL::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t c2s_BREAK_TILE_WALL::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_BREAK_TILE_WALL.tile_x)
  return _internal_tile_x();
}
inline void c2s_BREAK_TILE_WALL::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void c2s_BREAK_TILE_WALL::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_BREAK_TILE_WALL.tile_x)
}

// int32 tile_y = 2;
inline void c2s_BREAK_TILE_WALL::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t c2s_BREAK_TILE_WALL::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t c2s_BREAK_TILE_WALL::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_BREAK_TILE_WALL.tile_y)
  return _internal_tile_y();
}
inline void c2s_BREAK_TILE_WALL::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void c2s_BREAK_TILE_WALL::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_BREAK_TILE_WALL.tile_y)
}

// -------------------------------------------------------------------

// s2c_BREAK_TILE_WALL

// bool success = 1;
inline void s2c_BREAK_TILE_WALL::clear_success() {
  _impl_.success_ = false;
}
inline bool s2c_BREAK_TILE_WALL::_internal_success() const {
  return _impl_.success_;
}
inline bool s2c_BREAK_TILE_WALL::success() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE_WALL.success)
  return _internal_success();
}
inline void s2c_BREAK_TILE_WALL::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void s2c_BREAK_TILE_WALL::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE_WALL.success)
}

// int32 tile_x = 2;
inline void s2c_BREAK_TILE_WALL::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t s2c_BREAK_TILE_WALL::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t s2c_BREAK_TILE_WALL::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE_WALL.tile_x)
  return _internal_tile_x();
}
inline void s2c_BREAK_TILE_WALL::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void s2c_BREAK_TILE_WALL::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE_WALL.tile_x)
}

// int32 tile_y = 3;
inline void s2c_BREAK_TILE_WALL::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t s2c_BREAK_TILE_WALL::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t s2c_BREAK_TILE_WALL::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_BREAK_TILE_WALL.tile_y)
  return _internal_tile_y();
}
inline void s2c_BREAK_TILE_WALL::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void s2c_BREAK_TILE_WALL::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_BREAK_TILE_WALL.tile_y)
}

// -------------------------------------------------------------------

// c2s_PLACE_TILE

// int32 tile_x = 1;
inline void c2s_PLACE_TILE::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t c2s_PLACE_TILE::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t c2s_PLACE_TILE::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE.tile_x)
  return _internal_tile_x();
}
inline void c2s_PLACE_TILE::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void c2s_PLACE_TILE::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE.tile_x)
}

// int32 tile_y = 2;
inline void c2s_PLACE_TILE::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t c2s_PLACE_TILE::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t c2s_PLACE_TILE::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE.tile_y)
  return _internal_tile_y();
}
inline void c2s_PLACE_TILE::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void c2s_PLACE_TILE::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE.tile_y)
}

// string tile_key = 3;
inline void c2s_PLACE_TILE::clear_tile_key() {
  _impl_.tile_key_.ClearToEmpty();
}
inline const std::string& c2s_PLACE_TILE::tile_key() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE.tile_key)
  return _internal_tile_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void c2s_PLACE_TILE::set_tile_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tile_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE.tile_key)
}
inline std::string* c2s_PLACE_TILE::mutable_tile_key() {
  std::string* _s = _internal_mutable_tile_key();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_PLACE_TILE.tile_key)
  return _s;
}
inline const std::string& c2s_PLACE_TILE::_internal_tile_key() const {
  return _impl_.tile_key_.Get();
}
inline void c2s_PLACE_TILE::_internal_set_tile_key(const std::string& value) {
  
  _impl_.tile_key_.Set(value, GetArenaForAllocation());
}
inline std::string* c2s_PLACE_TILE::_internal_mutable_tile_key() {
  
  return _impl_.tile_key_.Mutable(GetArenaForAllocation());
}
inline std::string* c2s_PLACE_TILE::release_tile_key() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_PLACE_TILE.tile_key)
  return _impl_.tile_key_.Release();
}
inline void c2s_PLACE_TILE::set_allocated_tile_key(std::string* tile_key) {
  if (tile_key != nullptr) {
    
  } else {
    
  }
  _impl_.tile_key_.SetAllocated(tile_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tile_key_.IsDefault()) {
    _impl_.tile_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_PLACE_TILE.tile_key)
}

// -------------------------------------------------------------------

// s2c_PLACE_TILE

// bool success = 1;
inline void s2c_PLACE_TILE::clear_success() {
  _impl_.success_ = false;
}
inline bool s2c_PLACE_TILE::_internal_success() const {
  return _impl_.success_;
}
inline bool s2c_PLACE_TILE::success() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE.success)
  return _internal_success();
}
inline void s2c_PLACE_TILE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void s2c_PLACE_TILE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE.success)
}

// int32 tile_x = 2;
inline void s2c_PLACE_TILE::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t s2c_PLACE_TILE::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t s2c_PLACE_TILE::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE.tile_x)
  return _internal_tile_x();
}
inline void s2c_PLACE_TILE::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void s2c_PLACE_TILE::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE.tile_x)
}

// int32 tile_y = 3;
inline void s2c_PLACE_TILE::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t s2c_PLACE_TILE::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t s2c_PLACE_TILE::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE.tile_y)
  return _internal_tile_y();
}
inline void s2c_PLACE_TILE::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void s2c_PLACE_TILE::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE.tile_y)
}

// string tile_key = 4;
inline void s2c_PLACE_TILE::clear_tile_key() {
  _impl_.tile_key_.ClearToEmpty();
}
inline const std::string& s2c_PLACE_TILE::tile_key() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE.tile_key)
  return _internal_tile_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2c_PLACE_TILE::set_tile_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tile_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE.tile_key)
}
inline std::string* s2c_PLACE_TILE::mutable_tile_key() {
  std::string* _s = _internal_mutable_tile_key();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_PLACE_TILE.tile_key)
  return _s;
}
inline const std::string& s2c_PLACE_TILE::_internal_tile_key() const {
  return _impl_.tile_key_.Get();
}
inline void s2c_PLACE_TILE::_internal_set_tile_key(const std::string& value) {
  
  _impl_.tile_key_.Set(value, GetArenaForAllocation());
}
inline std::string* s2c_PLACE_TILE::_internal_mutable_tile_key() {
  
  return _impl_.tile_key_.Mutable(GetArenaForAllocation());
}
inline std::string* s2c_PLACE_TILE::release_tile_key() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_PLACE_TILE.tile_key)
  return _impl_.tile_key_.Release();
}
inline void s2c_PLACE_TILE::set_allocated_tile_key(std::string* tile_key) {
  if (tile_key != nullptr) {
    
  } else {
    
  }
  _impl_.tile_key_.SetAllocated(tile_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tile_key_.IsDefault()) {
    _impl_.tile_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_PLACE_TILE.tile_key)
}

// -------------------------------------------------------------------

// c2s_PLACE_TILE_WALL

// int32 tile_x = 1;
inline void c2s_PLACE_TILE_WALL::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t c2s_PLACE_TILE_WALL::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t c2s_PLACE_TILE_WALL::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE_WALL.tile_x)
  return _internal_tile_x();
}
inline void c2s_PLACE_TILE_WALL::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void c2s_PLACE_TILE_WALL::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE_WALL.tile_x)
}

// int32 tile_y = 2;
inline void c2s_PLACE_TILE_WALL::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t c2s_PLACE_TILE_WALL::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t c2s_PLACE_TILE_WALL::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE_WALL.tile_y)
  return _internal_tile_y();
}
inline void c2s_PLACE_TILE_WALL::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void c2s_PLACE_TILE_WALL::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE_WALL.tile_y)
}

// string tile_key = 3;
inline void c2s_PLACE_TILE_WALL::clear_tile_key() {
  _impl_.tile_key_.ClearToEmpty();
}
inline const std::string& c2s_PLACE_TILE_WALL::tile_key() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_PLACE_TILE_WALL.tile_key)
  return _internal_tile_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void c2s_PLACE_TILE_WALL::set_tile_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tile_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.c2s_PLACE_TILE_WALL.tile_key)
}
inline std::string* c2s_PLACE_TILE_WALL::mutable_tile_key() {
  std::string* _s = _internal_mutable_tile_key();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_PLACE_TILE_WALL.tile_key)
  return _s;
}
inline const std::string& c2s_PLACE_TILE_WALL::_internal_tile_key() const {
  return _impl_.tile_key_.Get();
}
inline void c2s_PLACE_TILE_WALL::_internal_set_tile_key(const std::string& value) {
  
  _impl_.tile_key_.Set(value, GetArenaForAllocation());
}
inline std::string* c2s_PLACE_TILE_WALL::_internal_mutable_tile_key() {
  
  return _impl_.tile_key_.Mutable(GetArenaForAllocation());
}
inline std::string* c2s_PLACE_TILE_WALL::release_tile_key() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_PLACE_TILE_WALL.tile_key)
  return _impl_.tile_key_.Release();
}
inline void c2s_PLACE_TILE_WALL::set_allocated_tile_key(std::string* tile_key) {
  if (tile_key != nullptr) {
    
  } else {
    
  }
  _impl_.tile_key_.SetAllocated(tile_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tile_key_.IsDefault()) {
    _impl_.tile_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_PLACE_TILE_WALL.tile_key)
}

// -------------------------------------------------------------------

// s2c_PLACE_TILE_WALL

// bool success = 1;
inline void s2c_PLACE_TILE_WALL::clear_success() {
  _impl_.success_ = false;
}
inline bool s2c_PLACE_TILE_WALL::_internal_success() const {
  return _impl_.success_;
}
inline bool s2c_PLACE_TILE_WALL::success() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE_WALL.success)
  return _internal_success();
}
inline void s2c_PLACE_TILE_WALL::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void s2c_PLACE_TILE_WALL::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE_WALL.success)
}

// int32 tile_x = 2;
inline void s2c_PLACE_TILE_WALL::clear_tile_x() {
  _impl_.tile_x_ = 0;
}
inline int32_t s2c_PLACE_TILE_WALL::_internal_tile_x() const {
  return _impl_.tile_x_;
}
inline int32_t s2c_PLACE_TILE_WALL::tile_x() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE_WALL.tile_x)
  return _internal_tile_x();
}
inline void s2c_PLACE_TILE_WALL::_internal_set_tile_x(int32_t value) {
  
  _impl_.tile_x_ = value;
}
inline void s2c_PLACE_TILE_WALL::set_tile_x(int32_t value) {
  _internal_set_tile_x(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE_WALL.tile_x)
}

// int32 tile_y = 3;
inline void s2c_PLACE_TILE_WALL::clear_tile_y() {
  _impl_.tile_y_ = 0;
}
inline int32_t s2c_PLACE_TILE_WALL::_internal_tile_y() const {
  return _impl_.tile_y_;
}
inline int32_t s2c_PLACE_TILE_WALL::tile_y() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE_WALL.tile_y)
  return _internal_tile_y();
}
inline void s2c_PLACE_TILE_WALL::_internal_set_tile_y(int32_t value) {
  
  _impl_.tile_y_ = value;
}
inline void s2c_PLACE_TILE_WALL::set_tile_y(int32_t value) {
  _internal_set_tile_y(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE_WALL.tile_y)
}

// string tile_key = 4;
inline void s2c_PLACE_TILE_WALL::clear_tile_key() {
  _impl_.tile_key_.ClearToEmpty();
}
inline const std::string& s2c_PLACE_TILE_WALL::tile_key() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_PLACE_TILE_WALL.tile_key)
  return _internal_tile_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2c_PLACE_TILE_WALL::set_tile_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tile_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.s2c_PLACE_TILE_WALL.tile_key)
}
inline std::string* s2c_PLACE_TILE_WALL::mutable_tile_key() {
  std::string* _s = _internal_mutable_tile_key();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_PLACE_TILE_WALL.tile_key)
  return _s;
}
inline const std::string& s2c_PLACE_TILE_WALL::_internal_tile_key() const {
  return _impl_.tile_key_.Get();
}
inline void s2c_PLACE_TILE_WALL::_internal_set_tile_key(const std::string& value) {
  
  _impl_.tile_key_.Set(value, GetArenaForAllocation());
}
inline std::string* s2c_PLACE_TILE_WALL::_internal_mutable_tile_key() {
  
  return _impl_.tile_key_.Mutable(GetArenaForAllocation());
}
inline std::string* s2c_PLACE_TILE_WALL::release_tile_key() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_PLACE_TILE_WALL.tile_key)
  return _impl_.tile_key_.Release();
}
inline void s2c_PLACE_TILE_WALL::set_allocated_tile_key(std::string* tile_key) {
  if (tile_key != nullptr) {
    
  } else {
    
  }
  _impl_.tile_key_.SetAllocated(tile_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tile_key_.IsDefault()) {
    _impl_.tile_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_PLACE_TILE_WALL.tile_key)
}

// -------------------------------------------------------------------

// c2s_MOVE

// .Protocol.Vec2 wiil_pos = 1;
inline bool c2s_MOVE::_internal_has_wiil_pos() const {
  return this != internal_default_instance() && _impl_.wiil_pos_ != nullptr;
}
inline bool c2s_MOVE::has_wiil_pos() const {
  return _internal_has_wiil_pos();
}
inline const ::Protocol::Vec2& c2s_MOVE::_internal_wiil_pos() const {
  const ::Protocol::Vec2* p = _impl_.wiil_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_MOVE::wiil_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.wiil_pos)
  return _internal_wiil_pos();
}
inline void c2s_MOVE::unsafe_arena_set_allocated_wiil_pos(
    ::Protocol::Vec2* wiil_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiil_pos_);
  }
  _impl_.wiil_pos_ = wiil_pos;
  if (wiil_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_MOVE.wiil_pos)
}
inline ::Protocol::Vec2* c2s_MOVE::release_wiil_pos() {
  
  ::Protocol::Vec2* temp = _impl_.wiil_pos_;
  _impl_.wiil_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::unsafe_arena_release_wiil_pos() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_MOVE.wiil_pos)
  
  ::Protocol::Vec2* temp = _impl_.wiil_pos_;
  _impl_.wiil_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::_internal_mutable_wiil_pos() {
  
  if (_impl_.wiil_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.wiil_pos_ = p;
  }
  return _impl_.wiil_pos_;
}
inline ::Protocol::Vec2* c2s_MOVE::mutable_wiil_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_wiil_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_MOVE.wiil_pos)
  return _msg;
}
inline void c2s_MOVE::set_allocated_wiil_pos(::Protocol::Vec2* wiil_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiil_pos_);
  }
  if (wiil_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wiil_pos));
    if (message_arena != submessage_arena) {
      wiil_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiil_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wiil_pos_ = wiil_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_MOVE.wiil_pos)
}

// .Protocol.Vec2 obj_pos = 2;
inline bool c2s_MOVE::_internal_has_obj_pos() const {
  return this != internal_default_instance() && _impl_.obj_pos_ != nullptr;
}
inline bool c2s_MOVE::has_obj_pos() const {
  return _internal_has_obj_pos();
}
inline const ::Protocol::Vec2& c2s_MOVE::_internal_obj_pos() const {
  const ::Protocol::Vec2* p = _impl_.obj_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_MOVE::obj_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.obj_pos)
  return _internal_obj_pos();
}
inline void c2s_MOVE::unsafe_arena_set_allocated_obj_pos(
    ::Protocol::Vec2* obj_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  _impl_.obj_pos_ = obj_pos;
  if (obj_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_MOVE.obj_pos)
}
inline ::Protocol::Vec2* c2s_MOVE::release_obj_pos() {
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::unsafe_arena_release_obj_pos() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_MOVE.obj_pos)
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::_internal_mutable_obj_pos() {
  
  if (_impl_.obj_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.obj_pos_ = p;
  }
  return _impl_.obj_pos_;
}
inline ::Protocol::Vec2* c2s_MOVE::mutable_obj_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_obj_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_MOVE.obj_pos)
  return _msg;
}
inline void c2s_MOVE::set_allocated_obj_pos(::Protocol::Vec2* obj_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  if (obj_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_pos));
    if (message_arena != submessage_arena) {
      obj_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_pos_ = obj_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_MOVE.obj_pos)
}

// .Protocol.Vec2 vel = 3;
inline bool c2s_MOVE::_internal_has_vel() const {
  return this != internal_default_instance() && _impl_.vel_ != nullptr;
}
inline bool c2s_MOVE::has_vel() const {
  return _internal_has_vel();
}
inline const ::Protocol::Vec2& c2s_MOVE::_internal_vel() const {
  const ::Protocol::Vec2* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_MOVE::vel() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.vel)
  return _internal_vel();
}
inline void c2s_MOVE::unsafe_arena_set_allocated_vel(
    ::Protocol::Vec2* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_MOVE.vel)
}
inline ::Protocol::Vec2* c2s_MOVE::release_vel() {
  
  ::Protocol::Vec2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_MOVE.vel)
  
  ::Protocol::Vec2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::_internal_mutable_vel() {
  
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Protocol::Vec2* c2s_MOVE::mutable_vel() {
  ::Protocol::Vec2* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_MOVE.vel)
  return _msg;
}
inline void c2s_MOVE::set_allocated_vel(::Protocol::Vec2* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_MOVE.vel)
}

// .Protocol.Vec2 scale = 4;
inline bool c2s_MOVE::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool c2s_MOVE::has_scale() const {
  return _internal_has_scale();
}
inline const ::Protocol::Vec2& c2s_MOVE::_internal_scale() const {
  const ::Protocol::Vec2* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_MOVE::scale() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.scale)
  return _internal_scale();
}
inline void c2s_MOVE::unsafe_arena_set_allocated_scale(
    ::Protocol::Vec2* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_MOVE.scale)
}
inline ::Protocol::Vec2* c2s_MOVE::release_scale() {
  
  ::Protocol::Vec2* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_MOVE.scale)
  
  ::Protocol::Vec2* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::Protocol::Vec2* c2s_MOVE::mutable_scale() {
  ::Protocol::Vec2* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_MOVE.scale)
  return _msg;
}
inline void c2s_MOVE::set_allocated_scale(::Protocol::Vec2* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_MOVE.scale)
}

// .Protocol.PLAYER_STATE state = 5;
inline void c2s_MOVE::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::PLAYER_STATE c2s_MOVE::_internal_state() const {
  return static_cast< ::Protocol::PLAYER_STATE >(_impl_.state_);
}
inline ::Protocol::PLAYER_STATE c2s_MOVE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.state)
  return _internal_state();
}
inline void c2s_MOVE::_internal_set_state(::Protocol::PLAYER_STATE value) {
  
  _impl_.state_ = value;
}
inline void c2s_MOVE::set_state(::Protocol::PLAYER_STATE value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_MOVE.state)
}

// int32 anim_dir = 6;
inline void c2s_MOVE::clear_anim_dir() {
  _impl_.anim_dir_ = 0;
}
inline int32_t c2s_MOVE::_internal_anim_dir() const {
  return _impl_.anim_dir_;
}
inline int32_t c2s_MOVE::anim_dir() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.anim_dir)
  return _internal_anim_dir();
}
inline void c2s_MOVE::_internal_set_anim_dir(int32_t value) {
  
  _impl_.anim_dir_ = value;
}
inline void c2s_MOVE::set_anim_dir(int32_t value) {
  _internal_set_anim_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_MOVE.anim_dir)
}

// bool ground = 7;
inline void c2s_MOVE::clear_ground() {
  _impl_.ground_ = false;
}
inline bool c2s_MOVE::_internal_ground() const {
  return _impl_.ground_;
}
inline bool c2s_MOVE::ground() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.ground)
  return _internal_ground();
}
inline void c2s_MOVE::_internal_set_ground(bool value) {
  
  _impl_.ground_ = value;
}
inline void c2s_MOVE::set_ground(bool value) {
  _internal_set_ground(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_MOVE.ground)
}

// .Protocol.Vec2 accel = 8;
inline bool c2s_MOVE::_internal_has_accel() const {
  return this != internal_default_instance() && _impl_.accel_ != nullptr;
}
inline bool c2s_MOVE::has_accel() const {
  return _internal_has_accel();
}
inline const ::Protocol::Vec2& c2s_MOVE::_internal_accel() const {
  const ::Protocol::Vec2* p = _impl_.accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_MOVE::accel() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_MOVE.accel)
  return _internal_accel();
}
inline void c2s_MOVE::unsafe_arena_set_allocated_accel(
    ::Protocol::Vec2* accel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  _impl_.accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_MOVE.accel)
}
inline ::Protocol::Vec2* c2s_MOVE::release_accel() {
  
  ::Protocol::Vec2* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_MOVE.accel)
  
  ::Protocol::Vec2* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_MOVE::_internal_mutable_accel() {
  
  if (_impl_.accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.accel_ = p;
  }
  return _impl_.accel_;
}
inline ::Protocol::Vec2* c2s_MOVE::mutable_accel() {
  ::Protocol::Vec2* _msg = _internal_mutable_accel();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_MOVE.accel)
  return _msg;
}
inline void c2s_MOVE::set_allocated_accel(::Protocol::Vec2* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel));
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_MOVE.accel)
}

// -------------------------------------------------------------------

// s2c_MOVE

// uint64 obj_id = 1;
inline void s2c_MOVE::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_MOVE::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_MOVE::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.obj_id)
  return _internal_obj_id();
}
inline void s2c_MOVE::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_MOVE::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_MOVE.obj_id)
}

// .Protocol.Vec2 obj_pos = 2;
inline bool s2c_MOVE::_internal_has_obj_pos() const {
  return this != internal_default_instance() && _impl_.obj_pos_ != nullptr;
}
inline bool s2c_MOVE::has_obj_pos() const {
  return _internal_has_obj_pos();
}
inline const ::Protocol::Vec2& s2c_MOVE::_internal_obj_pos() const {
  const ::Protocol::Vec2* p = _impl_.obj_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_MOVE::obj_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.obj_pos)
  return _internal_obj_pos();
}
inline void s2c_MOVE::unsafe_arena_set_allocated_obj_pos(
    ::Protocol::Vec2* obj_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  _impl_.obj_pos_ = obj_pos;
  if (obj_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_MOVE.obj_pos)
}
inline ::Protocol::Vec2* s2c_MOVE::release_obj_pos() {
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::unsafe_arena_release_obj_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_MOVE.obj_pos)
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::_internal_mutable_obj_pos() {
  
  if (_impl_.obj_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.obj_pos_ = p;
  }
  return _impl_.obj_pos_;
}
inline ::Protocol::Vec2* s2c_MOVE::mutable_obj_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_obj_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_MOVE.obj_pos)
  return _msg;
}
inline void s2c_MOVE::set_allocated_obj_pos(::Protocol::Vec2* obj_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  if (obj_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_pos));
    if (message_arena != submessage_arena) {
      obj_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_pos_ = obj_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_MOVE.obj_pos)
}

// .Protocol.Vec2 vel = 3;
inline bool s2c_MOVE::_internal_has_vel() const {
  return this != internal_default_instance() && _impl_.vel_ != nullptr;
}
inline bool s2c_MOVE::has_vel() const {
  return _internal_has_vel();
}
inline const ::Protocol::Vec2& s2c_MOVE::_internal_vel() const {
  const ::Protocol::Vec2* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_MOVE::vel() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.vel)
  return _internal_vel();
}
inline void s2c_MOVE::unsafe_arena_set_allocated_vel(
    ::Protocol::Vec2* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_MOVE.vel)
}
inline ::Protocol::Vec2* s2c_MOVE::release_vel() {
  
  ::Protocol::Vec2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_MOVE.vel)
  
  ::Protocol::Vec2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::_internal_mutable_vel() {
  
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Protocol::Vec2* s2c_MOVE::mutable_vel() {
  ::Protocol::Vec2* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_MOVE.vel)
  return _msg;
}
inline void s2c_MOVE::set_allocated_vel(::Protocol::Vec2* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_MOVE.vel)
}

// bool ground = 4;
inline void s2c_MOVE::clear_ground() {
  _impl_.ground_ = false;
}
inline bool s2c_MOVE::_internal_ground() const {
  return _impl_.ground_;
}
inline bool s2c_MOVE::ground() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.ground)
  return _internal_ground();
}
inline void s2c_MOVE::_internal_set_ground(bool value) {
  
  _impl_.ground_ = value;
}
inline void s2c_MOVE::set_ground(bool value) {
  _internal_set_ground(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_MOVE.ground)
}

// .Protocol.PLAYER_STATE state = 5;
inline void s2c_MOVE::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::PLAYER_STATE s2c_MOVE::_internal_state() const {
  return static_cast< ::Protocol::PLAYER_STATE >(_impl_.state_);
}
inline ::Protocol::PLAYER_STATE s2c_MOVE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.state)
  return _internal_state();
}
inline void s2c_MOVE::_internal_set_state(::Protocol::PLAYER_STATE value) {
  
  _impl_.state_ = value;
}
inline void s2c_MOVE::set_state(::Protocol::PLAYER_STATE value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_MOVE.state)
}

// uint64 time_stamp = 6;
inline void s2c_MOVE::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t s2c_MOVE::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t s2c_MOVE::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.time_stamp)
  return _internal_time_stamp();
}
inline void s2c_MOVE::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void s2c_MOVE::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_MOVE.time_stamp)
}

// .Protocol.Vec2 wiil_pos = 7;
inline bool s2c_MOVE::_internal_has_wiil_pos() const {
  return this != internal_default_instance() && _impl_.wiil_pos_ != nullptr;
}
inline bool s2c_MOVE::has_wiil_pos() const {
  return _internal_has_wiil_pos();
}
inline const ::Protocol::Vec2& s2c_MOVE::_internal_wiil_pos() const {
  const ::Protocol::Vec2* p = _impl_.wiil_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_MOVE::wiil_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.wiil_pos)
  return _internal_wiil_pos();
}
inline void s2c_MOVE::unsafe_arena_set_allocated_wiil_pos(
    ::Protocol::Vec2* wiil_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiil_pos_);
  }
  _impl_.wiil_pos_ = wiil_pos;
  if (wiil_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_MOVE.wiil_pos)
}
inline ::Protocol::Vec2* s2c_MOVE::release_wiil_pos() {
  
  ::Protocol::Vec2* temp = _impl_.wiil_pos_;
  _impl_.wiil_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::unsafe_arena_release_wiil_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_MOVE.wiil_pos)
  
  ::Protocol::Vec2* temp = _impl_.wiil_pos_;
  _impl_.wiil_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::_internal_mutable_wiil_pos() {
  
  if (_impl_.wiil_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.wiil_pos_ = p;
  }
  return _impl_.wiil_pos_;
}
inline ::Protocol::Vec2* s2c_MOVE::mutable_wiil_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_wiil_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_MOVE.wiil_pos)
  return _msg;
}
inline void s2c_MOVE::set_allocated_wiil_pos(::Protocol::Vec2* wiil_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiil_pos_);
  }
  if (wiil_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wiil_pos));
    if (message_arena != submessage_arena) {
      wiil_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiil_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wiil_pos_ = wiil_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_MOVE.wiil_pos)
}

// int32 anim_dir = 8;
inline void s2c_MOVE::clear_anim_dir() {
  _impl_.anim_dir_ = 0;
}
inline int32_t s2c_MOVE::_internal_anim_dir() const {
  return _impl_.anim_dir_;
}
inline int32_t s2c_MOVE::anim_dir() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.anim_dir)
  return _internal_anim_dir();
}
inline void s2c_MOVE::_internal_set_anim_dir(int32_t value) {
  
  _impl_.anim_dir_ = value;
}
inline void s2c_MOVE::set_anim_dir(int32_t value) {
  _internal_set_anim_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_MOVE.anim_dir)
}

// .Protocol.Vec2 accel = 9;
inline bool s2c_MOVE::_internal_has_accel() const {
  return this != internal_default_instance() && _impl_.accel_ != nullptr;
}
inline bool s2c_MOVE::has_accel() const {
  return _internal_has_accel();
}
inline const ::Protocol::Vec2& s2c_MOVE::_internal_accel() const {
  const ::Protocol::Vec2* p = _impl_.accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_MOVE::accel() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_MOVE.accel)
  return _internal_accel();
}
inline void s2c_MOVE::unsafe_arena_set_allocated_accel(
    ::Protocol::Vec2* accel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  _impl_.accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_MOVE.accel)
}
inline ::Protocol::Vec2* s2c_MOVE::release_accel() {
  
  ::Protocol::Vec2* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_MOVE.accel)
  
  ::Protocol::Vec2* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_MOVE::_internal_mutable_accel() {
  
  if (_impl_.accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.accel_ = p;
  }
  return _impl_.accel_;
}
inline ::Protocol::Vec2* s2c_MOVE::mutable_accel() {
  ::Protocol::Vec2* _msg = _internal_mutable_accel();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_MOVE.accel)
  return _msg;
}
inline void s2c_MOVE::set_allocated_accel(::Protocol::Vec2* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel));
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_MOVE.accel)
}

// -------------------------------------------------------------------

// c2s_CREATE_ITEM

// -------------------------------------------------------------------

// s2c_CREATE_ITEM

// uint64 obj_id = 1;
inline void s2c_CREATE_ITEM::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_CREATE_ITEM::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_CREATE_ITEM::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_ITEM.obj_id)
  return _internal_obj_id();
}
inline void s2c_CREATE_ITEM::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_CREATE_ITEM::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_CREATE_ITEM.obj_id)
}

// .Protocol.Vec2 pos = 2;
inline bool s2c_CREATE_ITEM::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool s2c_CREATE_ITEM::has_pos() const {
  return _internal_has_pos();
}
inline const ::Protocol::Vec2& s2c_CREATE_ITEM::_internal_pos() const {
  const ::Protocol::Vec2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_CREATE_ITEM::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_ITEM.pos)
  return _internal_pos();
}
inline void s2c_CREATE_ITEM::unsafe_arena_set_allocated_pos(
    ::Protocol::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_CREATE_ITEM.pos)
}
inline ::Protocol::Vec2* s2c_CREATE_ITEM::release_pos() {
  
  ::Protocol::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_CREATE_ITEM::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_CREATE_ITEM.pos)
  
  ::Protocol::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_CREATE_ITEM::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Protocol::Vec2* s2c_CREATE_ITEM::mutable_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_CREATE_ITEM.pos)
  return _msg;
}
inline void s2c_CREATE_ITEM::set_allocated_pos(::Protocol::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_CREATE_ITEM.pos)
}

// string item_name = 3;
inline void s2c_CREATE_ITEM::clear_item_name() {
  _impl_.item_name_.ClearToEmpty();
}
inline const std::string& s2c_CREATE_ITEM::item_name() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_ITEM.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2c_CREATE_ITEM::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.s2c_CREATE_ITEM.item_name)
}
inline std::string* s2c_CREATE_ITEM::mutable_item_name() {
  std::string* _s = _internal_mutable_item_name();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_CREATE_ITEM.item_name)
  return _s;
}
inline const std::string& s2c_CREATE_ITEM::_internal_item_name() const {
  return _impl_.item_name_.Get();
}
inline void s2c_CREATE_ITEM::_internal_set_item_name(const std::string& value) {
  
  _impl_.item_name_.Set(value, GetArenaForAllocation());
}
inline std::string* s2c_CREATE_ITEM::_internal_mutable_item_name() {
  
  return _impl_.item_name_.Mutable(GetArenaForAllocation());
}
inline std::string* s2c_CREATE_ITEM::release_item_name() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_CREATE_ITEM.item_name)
  return _impl_.item_name_.Release();
}
inline void s2c_CREATE_ITEM::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  _impl_.item_name_.SetAllocated(item_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_name_.IsDefault()) {
    _impl_.item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_CREATE_ITEM.item_name)
}

// int32 sector = 4;
inline void s2c_CREATE_ITEM::clear_sector() {
  _impl_.sector_ = 0;
}
inline int32_t s2c_CREATE_ITEM::_internal_sector() const {
  return _impl_.sector_;
}
inline int32_t s2c_CREATE_ITEM::sector() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_ITEM.sector)
  return _internal_sector();
}
inline void s2c_CREATE_ITEM::_internal_set_sector(int32_t value) {
  
  _impl_.sector_ = value;
}
inline void s2c_CREATE_ITEM::set_sector(int32_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_CREATE_ITEM.sector)
}

// -------------------------------------------------------------------

// c2s_GET_ITEM

// -------------------------------------------------------------------

// s2c_GET_ITEM

// uint64 obj_id = 1;
inline void s2c_GET_ITEM::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_GET_ITEM::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_GET_ITEM::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_GET_ITEM.obj_id)
  return _internal_obj_id();
}
inline void s2c_GET_ITEM::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_GET_ITEM::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_GET_ITEM.obj_id)
}

// .Protocol.Vec2 pos = 2;
inline bool s2c_GET_ITEM::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool s2c_GET_ITEM::has_pos() const {
  return _internal_has_pos();
}
inline const ::Protocol::Vec2& s2c_GET_ITEM::_internal_pos() const {
  const ::Protocol::Vec2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_GET_ITEM::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_GET_ITEM.pos)
  return _internal_pos();
}
inline void s2c_GET_ITEM::unsafe_arena_set_allocated_pos(
    ::Protocol::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_GET_ITEM.pos)
}
inline ::Protocol::Vec2* s2c_GET_ITEM::release_pos() {
  
  ::Protocol::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_GET_ITEM::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_GET_ITEM.pos)
  
  ::Protocol::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_GET_ITEM::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Protocol::Vec2* s2c_GET_ITEM::mutable_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_GET_ITEM.pos)
  return _msg;
}
inline void s2c_GET_ITEM::set_allocated_pos(::Protocol::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_GET_ITEM.pos)
}

// string item_name = 3;
inline void s2c_GET_ITEM::clear_item_name() {
  _impl_.item_name_.ClearToEmpty();
}
inline const std::string& s2c_GET_ITEM::item_name() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_GET_ITEM.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2c_GET_ITEM::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.s2c_GET_ITEM.item_name)
}
inline std::string* s2c_GET_ITEM::mutable_item_name() {
  std::string* _s = _internal_mutable_item_name();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_GET_ITEM.item_name)
  return _s;
}
inline const std::string& s2c_GET_ITEM::_internal_item_name() const {
  return _impl_.item_name_.Get();
}
inline void s2c_GET_ITEM::_internal_set_item_name(const std::string& value) {
  
  _impl_.item_name_.Set(value, GetArenaForAllocation());
}
inline std::string* s2c_GET_ITEM::_internal_mutable_item_name() {
  
  return _impl_.item_name_.Mutable(GetArenaForAllocation());
}
inline std::string* s2c_GET_ITEM::release_item_name() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_GET_ITEM.item_name)
  return _impl_.item_name_.Release();
}
inline void s2c_GET_ITEM::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  _impl_.item_name_.SetAllocated(item_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_name_.IsDefault()) {
    _impl_.item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_GET_ITEM.item_name)
}

// uint64 item_id = 4;
inline void s2c_GET_ITEM::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
}
inline uint64_t s2c_GET_ITEM::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t s2c_GET_ITEM::item_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_GET_ITEM.item_id)
  return _internal_item_id();
}
inline void s2c_GET_ITEM::_internal_set_item_id(uint64_t value) {
  
  _impl_.item_id_ = value;
}
inline void s2c_GET_ITEM::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_GET_ITEM.item_id)
}

// int32 sector = 5;
inline void s2c_GET_ITEM::clear_sector() {
  _impl_.sector_ = 0;
}
inline int32_t s2c_GET_ITEM::_internal_sector() const {
  return _impl_.sector_;
}
inline int32_t s2c_GET_ITEM::sector() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_GET_ITEM.sector)
  return _internal_sector();
}
inline void s2c_GET_ITEM::_internal_set_sector(int32_t value) {
  
  _impl_.sector_ = value;
}
inline void s2c_GET_ITEM::set_sector(int32_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_GET_ITEM.sector)
}

// -------------------------------------------------------------------

// c2s_INPUT_KEY

// int32 vk_key = 1;
inline void c2s_INPUT_KEY::clear_vk_key() {
  _impl_.vk_key_ = 0;
}
inline int32_t c2s_INPUT_KEY::_internal_vk_key() const {
  return _impl_.vk_key_;
}
inline int32_t c2s_INPUT_KEY::vk_key() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_INPUT_KEY.vk_key)
  return _internal_vk_key();
}
inline void c2s_INPUT_KEY::_internal_set_vk_key(int32_t value) {
  
  _impl_.vk_key_ = value;
}
inline void c2s_INPUT_KEY::set_vk_key(int32_t value) {
  _internal_set_vk_key(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_INPUT_KEY.vk_key)
}

// int32 key_state = 2;
inline void c2s_INPUT_KEY::clear_key_state() {
  _impl_.key_state_ = 0;
}
inline int32_t c2s_INPUT_KEY::_internal_key_state() const {
  return _impl_.key_state_;
}
inline int32_t c2s_INPUT_KEY::key_state() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_INPUT_KEY.key_state)
  return _internal_key_state();
}
inline void c2s_INPUT_KEY::_internal_set_key_state(int32_t value) {
  
  _impl_.key_state_ = value;
}
inline void c2s_INPUT_KEY::set_key_state(int32_t value) {
  _internal_set_key_state(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_INPUT_KEY.key_state)
}

// -------------------------------------------------------------------

// s2c_INPUT_KEY

// -------------------------------------------------------------------

// c2s_TRY_GET_ITEM

// .Protocol.Vec2 obj_pos = 1;
inline bool c2s_TRY_GET_ITEM::_internal_has_obj_pos() const {
  return this != internal_default_instance() && _impl_.obj_pos_ != nullptr;
}
inline bool c2s_TRY_GET_ITEM::has_obj_pos() const {
  return _internal_has_obj_pos();
}
inline const ::Protocol::Vec2& c2s_TRY_GET_ITEM::_internal_obj_pos() const {
  const ::Protocol::Vec2* p = _impl_.obj_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_TRY_GET_ITEM::obj_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_TRY_GET_ITEM.obj_pos)
  return _internal_obj_pos();
}
inline void c2s_TRY_GET_ITEM::unsafe_arena_set_allocated_obj_pos(
    ::Protocol::Vec2* obj_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  _impl_.obj_pos_ = obj_pos;
  if (obj_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_TRY_GET_ITEM.obj_pos)
}
inline ::Protocol::Vec2* c2s_TRY_GET_ITEM::release_obj_pos() {
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_TRY_GET_ITEM::unsafe_arena_release_obj_pos() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_TRY_GET_ITEM.obj_pos)
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_TRY_GET_ITEM::_internal_mutable_obj_pos() {
  
  if (_impl_.obj_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.obj_pos_ = p;
  }
  return _impl_.obj_pos_;
}
inline ::Protocol::Vec2* c2s_TRY_GET_ITEM::mutable_obj_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_obj_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_TRY_GET_ITEM.obj_pos)
  return _msg;
}
inline void c2s_TRY_GET_ITEM::set_allocated_obj_pos(::Protocol::Vec2* obj_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  if (obj_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_pos));
    if (message_arena != submessage_arena) {
      obj_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_pos_ = obj_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_TRY_GET_ITEM.obj_pos)
}

// uint64 time_stamp = 2;
inline void c2s_TRY_GET_ITEM::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t c2s_TRY_GET_ITEM::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t c2s_TRY_GET_ITEM::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_TRY_GET_ITEM.time_stamp)
  return _internal_time_stamp();
}
inline void c2s_TRY_GET_ITEM::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void c2s_TRY_GET_ITEM::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_TRY_GET_ITEM.time_stamp)
}

// -------------------------------------------------------------------

// s2c_TRY_GET_ITEM

// -------------------------------------------------------------------

// c2s_TRY_NEW_ROOM

// int32 cur_sector_num = 1;
inline void c2s_TRY_NEW_ROOM::clear_cur_sector_num() {
  _impl_.cur_sector_num_ = 0;
}
inline int32_t c2s_TRY_NEW_ROOM::_internal_cur_sector_num() const {
  return _impl_.cur_sector_num_;
}
inline int32_t c2s_TRY_NEW_ROOM::cur_sector_num() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_TRY_NEW_ROOM.cur_sector_num)
  return _internal_cur_sector_num();
}
inline void c2s_TRY_NEW_ROOM::_internal_set_cur_sector_num(int32_t value) {
  
  _impl_.cur_sector_num_ = value;
}
inline void c2s_TRY_NEW_ROOM::set_cur_sector_num(int32_t value) {
  _internal_set_cur_sector_num(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_TRY_NEW_ROOM.cur_sector_num)
}

// int32 next_sector_num = 2;
inline void c2s_TRY_NEW_ROOM::clear_next_sector_num() {
  _impl_.next_sector_num_ = 0;
}
inline int32_t c2s_TRY_NEW_ROOM::_internal_next_sector_num() const {
  return _impl_.next_sector_num_;
}
inline int32_t c2s_TRY_NEW_ROOM::next_sector_num() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_TRY_NEW_ROOM.next_sector_num)
  return _internal_next_sector_num();
}
inline void c2s_TRY_NEW_ROOM::_internal_set_next_sector_num(int32_t value) {
  
  _impl_.next_sector_num_ = value;
}
inline void c2s_TRY_NEW_ROOM::set_next_sector_num(int32_t value) {
  _internal_set_next_sector_num(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_TRY_NEW_ROOM.next_sector_num)
}

// -------------------------------------------------------------------

// s2c_TRY_NEW_ROOM

// int32 cur_sector_num = 1;
inline void s2c_TRY_NEW_ROOM::clear_cur_sector_num() {
  _impl_.cur_sector_num_ = 0;
}
inline int32_t s2c_TRY_NEW_ROOM::_internal_cur_sector_num() const {
  return _impl_.cur_sector_num_;
}
inline int32_t s2c_TRY_NEW_ROOM::cur_sector_num() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_TRY_NEW_ROOM.cur_sector_num)
  return _internal_cur_sector_num();
}
inline void s2c_TRY_NEW_ROOM::_internal_set_cur_sector_num(int32_t value) {
  
  _impl_.cur_sector_num_ = value;
}
inline void s2c_TRY_NEW_ROOM::set_cur_sector_num(int32_t value) {
  _internal_set_cur_sector_num(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_TRY_NEW_ROOM.cur_sector_num)
}

// int32 next_sector_num = 2;
inline void s2c_TRY_NEW_ROOM::clear_next_sector_num() {
  _impl_.next_sector_num_ = 0;
}
inline int32_t s2c_TRY_NEW_ROOM::_internal_next_sector_num() const {
  return _impl_.next_sector_num_;
}
inline int32_t s2c_TRY_NEW_ROOM::next_sector_num() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_TRY_NEW_ROOM.next_sector_num)
  return _internal_next_sector_num();
}
inline void s2c_TRY_NEW_ROOM::_internal_set_next_sector_num(int32_t value) {
  
  _impl_.next_sector_num_ = value;
}
inline void s2c_TRY_NEW_ROOM::set_next_sector_num(int32_t value) {
  _internal_set_next_sector_num(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_TRY_NEW_ROOM.next_sector_num)
}

// -------------------------------------------------------------------

// c2s_ARRIVE_NEW_ROOM

// -------------------------------------------------------------------

// s2c_ARRIVE_NEW_ROOM

// -------------------------------------------------------------------

// c2s_APPEAR_NEW_OBJECT

// -------------------------------------------------------------------

// s2c_APPEAR_NEW_OBJECT

// bool is_player = 1;
inline void s2c_APPEAR_NEW_OBJECT::clear_is_player() {
  _impl_.is_player_ = false;
}
inline bool s2c_APPEAR_NEW_OBJECT::_internal_is_player() const {
  return _impl_.is_player_;
}
inline bool s2c_APPEAR_NEW_OBJECT::is_player() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.is_player)
  return _internal_is_player();
}
inline void s2c_APPEAR_NEW_OBJECT::_internal_set_is_player(bool value) {
  
  _impl_.is_player_ = value;
}
inline void s2c_APPEAR_NEW_OBJECT::set_is_player(bool value) {
  _internal_set_is_player(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_APPEAR_NEW_OBJECT.is_player)
}

// uint32 sector = 2;
inline void s2c_APPEAR_NEW_OBJECT::clear_sector() {
  _impl_.sector_ = 0u;
}
inline uint32_t s2c_APPEAR_NEW_OBJECT::_internal_sector() const {
  return _impl_.sector_;
}
inline uint32_t s2c_APPEAR_NEW_OBJECT::sector() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.sector)
  return _internal_sector();
}
inline void s2c_APPEAR_NEW_OBJECT::_internal_set_sector(uint32_t value) {
  
  _impl_.sector_ = value;
}
inline void s2c_APPEAR_NEW_OBJECT::set_sector(uint32_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_APPEAR_NEW_OBJECT.sector)
}

// uint64 obj_id = 3;
inline void s2c_APPEAR_NEW_OBJECT::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_APPEAR_NEW_OBJECT::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_APPEAR_NEW_OBJECT::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.obj_id)
  return _internal_obj_id();
}
inline void s2c_APPEAR_NEW_OBJECT::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_APPEAR_NEW_OBJECT::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_APPEAR_NEW_OBJECT.obj_id)
}

// string obj_name = 4;
inline void s2c_APPEAR_NEW_OBJECT::clear_obj_name() {
  _impl_.obj_name_.ClearToEmpty();
}
inline const std::string& s2c_APPEAR_NEW_OBJECT::obj_name() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.obj_name)
  return _internal_obj_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2c_APPEAR_NEW_OBJECT::set_obj_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.obj_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.s2c_APPEAR_NEW_OBJECT.obj_name)
}
inline std::string* s2c_APPEAR_NEW_OBJECT::mutable_obj_name() {
  std::string* _s = _internal_mutable_obj_name();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_APPEAR_NEW_OBJECT.obj_name)
  return _s;
}
inline const std::string& s2c_APPEAR_NEW_OBJECT::_internal_obj_name() const {
  return _impl_.obj_name_.Get();
}
inline void s2c_APPEAR_NEW_OBJECT::_internal_set_obj_name(const std::string& value) {
  
  _impl_.obj_name_.Set(value, GetArenaForAllocation());
}
inline std::string* s2c_APPEAR_NEW_OBJECT::_internal_mutable_obj_name() {
  
  return _impl_.obj_name_.Mutable(GetArenaForAllocation());
}
inline std::string* s2c_APPEAR_NEW_OBJECT::release_obj_name() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_APPEAR_NEW_OBJECT.obj_name)
  return _impl_.obj_name_.Release();
}
inline void s2c_APPEAR_NEW_OBJECT::set_allocated_obj_name(std::string* obj_name) {
  if (obj_name != nullptr) {
    
  } else {
    
  }
  _impl_.obj_name_.SetAllocated(obj_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obj_name_.IsDefault()) {
    _impl_.obj_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_APPEAR_NEW_OBJECT.obj_name)
}

// .Protocol.Vec2 appear_pos = 5;
inline bool s2c_APPEAR_NEW_OBJECT::_internal_has_appear_pos() const {
  return this != internal_default_instance() && _impl_.appear_pos_ != nullptr;
}
inline bool s2c_APPEAR_NEW_OBJECT::has_appear_pos() const {
  return _internal_has_appear_pos();
}
inline const ::Protocol::Vec2& s2c_APPEAR_NEW_OBJECT::_internal_appear_pos() const {
  const ::Protocol::Vec2* p = _impl_.appear_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_APPEAR_NEW_OBJECT::appear_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.appear_pos)
  return _internal_appear_pos();
}
inline void s2c_APPEAR_NEW_OBJECT::unsafe_arena_set_allocated_appear_pos(
    ::Protocol::Vec2* appear_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appear_pos_);
  }
  _impl_.appear_pos_ = appear_pos;
  if (appear_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_APPEAR_NEW_OBJECT.appear_pos)
}
inline ::Protocol::Vec2* s2c_APPEAR_NEW_OBJECT::release_appear_pos() {
  
  ::Protocol::Vec2* temp = _impl_.appear_pos_;
  _impl_.appear_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_APPEAR_NEW_OBJECT::unsafe_arena_release_appear_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_APPEAR_NEW_OBJECT.appear_pos)
  
  ::Protocol::Vec2* temp = _impl_.appear_pos_;
  _impl_.appear_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_APPEAR_NEW_OBJECT::_internal_mutable_appear_pos() {
  
  if (_impl_.appear_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.appear_pos_ = p;
  }
  return _impl_.appear_pos_;
}
inline ::Protocol::Vec2* s2c_APPEAR_NEW_OBJECT::mutable_appear_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_appear_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_APPEAR_NEW_OBJECT.appear_pos)
  return _msg;
}
inline void s2c_APPEAR_NEW_OBJECT::set_allocated_appear_pos(::Protocol::Vec2* appear_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appear_pos_);
  }
  if (appear_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appear_pos));
    if (message_arena != submessage_arena) {
      appear_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appear_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appear_pos_ = appear_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_APPEAR_NEW_OBJECT.appear_pos)
}

// uint64 time_stamp = 6;
inline void s2c_APPEAR_NEW_OBJECT::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t s2c_APPEAR_NEW_OBJECT::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t s2c_APPEAR_NEW_OBJECT::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_APPEAR_NEW_OBJECT.time_stamp)
  return _internal_time_stamp();
}
inline void s2c_APPEAR_NEW_OBJECT::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void s2c_APPEAR_NEW_OBJECT::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_APPEAR_NEW_OBJECT.time_stamp)
}

// -------------------------------------------------------------------

// c2s_LEAVE_OBJECT

// bool is_player = 1;
inline void c2s_LEAVE_OBJECT::clear_is_player() {
  _impl_.is_player_ = false;
}
inline bool c2s_LEAVE_OBJECT::_internal_is_player() const {
  return _impl_.is_player_;
}
inline bool c2s_LEAVE_OBJECT::is_player() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_LEAVE_OBJECT.is_player)
  return _internal_is_player();
}
inline void c2s_LEAVE_OBJECT::_internal_set_is_player(bool value) {
  
  _impl_.is_player_ = value;
}
inline void c2s_LEAVE_OBJECT::set_is_player(bool value) {
  _internal_set_is_player(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_LEAVE_OBJECT.is_player)
}

// uint64 obj_id = 2;
inline void c2s_LEAVE_OBJECT::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t c2s_LEAVE_OBJECT::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t c2s_LEAVE_OBJECT::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_LEAVE_OBJECT.obj_id)
  return _internal_obj_id();
}
inline void c2s_LEAVE_OBJECT::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void c2s_LEAVE_OBJECT::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_LEAVE_OBJECT.obj_id)
}

// int32 sector = 3;
inline void c2s_LEAVE_OBJECT::clear_sector() {
  _impl_.sector_ = 0;
}
inline int32_t c2s_LEAVE_OBJECT::_internal_sector() const {
  return _impl_.sector_;
}
inline int32_t c2s_LEAVE_OBJECT::sector() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_LEAVE_OBJECT.sector)
  return _internal_sector();
}
inline void c2s_LEAVE_OBJECT::_internal_set_sector(int32_t value) {
  
  _impl_.sector_ = value;
}
inline void c2s_LEAVE_OBJECT::set_sector(int32_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:Protocol.c2s_LEAVE_OBJECT.sector)
}

// -------------------------------------------------------------------

// s2c_LEAVE_OBJECT

// bool is_player = 1;
inline void s2c_LEAVE_OBJECT::clear_is_player() {
  _impl_.is_player_ = false;
}
inline bool s2c_LEAVE_OBJECT::_internal_is_player() const {
  return _impl_.is_player_;
}
inline bool s2c_LEAVE_OBJECT::is_player() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_LEAVE_OBJECT.is_player)
  return _internal_is_player();
}
inline void s2c_LEAVE_OBJECT::_internal_set_is_player(bool value) {
  
  _impl_.is_player_ = value;
}
inline void s2c_LEAVE_OBJECT::set_is_player(bool value) {
  _internal_set_is_player(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_LEAVE_OBJECT.is_player)
}

// uint64 obj_id = 2;
inline void s2c_LEAVE_OBJECT::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_LEAVE_OBJECT::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_LEAVE_OBJECT::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_LEAVE_OBJECT.obj_id)
  return _internal_obj_id();
}
inline void s2c_LEAVE_OBJECT::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_LEAVE_OBJECT::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_LEAVE_OBJECT.obj_id)
}

// int32 sector = 3;
inline void s2c_LEAVE_OBJECT::clear_sector() {
  _impl_.sector_ = 0;
}
inline int32_t s2c_LEAVE_OBJECT::_internal_sector() const {
  return _impl_.sector_;
}
inline int32_t s2c_LEAVE_OBJECT::sector() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_LEAVE_OBJECT.sector)
  return _internal_sector();
}
inline void s2c_LEAVE_OBJECT::_internal_set_sector(int32_t value) {
  
  _impl_.sector_ = value;
}
inline void s2c_LEAVE_OBJECT::set_sector(int32_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_LEAVE_OBJECT.sector)
}

// -------------------------------------------------------------------

// c2s_CREATE_MISSILE

// .Protocol.Vec2 obj_pos = 1;
inline bool c2s_CREATE_MISSILE::_internal_has_obj_pos() const {
  return this != internal_default_instance() && _impl_.obj_pos_ != nullptr;
}
inline bool c2s_CREATE_MISSILE::has_obj_pos() const {
  return _internal_has_obj_pos();
}
inline const ::Protocol::Vec2& c2s_CREATE_MISSILE::_internal_obj_pos() const {
  const ::Protocol::Vec2* p = _impl_.obj_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& c2s_CREATE_MISSILE::obj_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.c2s_CREATE_MISSILE.obj_pos)
  return _internal_obj_pos();
}
inline void c2s_CREATE_MISSILE::unsafe_arena_set_allocated_obj_pos(
    ::Protocol::Vec2* obj_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  _impl_.obj_pos_ = obj_pos;
  if (obj_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.c2s_CREATE_MISSILE.obj_pos)
}
inline ::Protocol::Vec2* c2s_CREATE_MISSILE::release_obj_pos() {
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* c2s_CREATE_MISSILE::unsafe_arena_release_obj_pos() {
  // @@protoc_insertion_point(field_release:Protocol.c2s_CREATE_MISSILE.obj_pos)
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* c2s_CREATE_MISSILE::_internal_mutable_obj_pos() {
  
  if (_impl_.obj_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.obj_pos_ = p;
  }
  return _impl_.obj_pos_;
}
inline ::Protocol::Vec2* c2s_CREATE_MISSILE::mutable_obj_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_obj_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.c2s_CREATE_MISSILE.obj_pos)
  return _msg;
}
inline void c2s_CREATE_MISSILE::set_allocated_obj_pos(::Protocol::Vec2* obj_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  if (obj_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_pos));
    if (message_arena != submessage_arena) {
      obj_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_pos_ = obj_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.c2s_CREATE_MISSILE.obj_pos)
}

// -------------------------------------------------------------------

// s2c_CREATE_MISSILE

// uint64 obj_id = 1;
inline void s2c_CREATE_MISSILE::clear_obj_id() {
  _impl_.obj_id_ = uint64_t{0u};
}
inline uint64_t s2c_CREATE_MISSILE::_internal_obj_id() const {
  return _impl_.obj_id_;
}
inline uint64_t s2c_CREATE_MISSILE::obj_id() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_MISSILE.obj_id)
  return _internal_obj_id();
}
inline void s2c_CREATE_MISSILE::_internal_set_obj_id(uint64_t value) {
  
  _impl_.obj_id_ = value;
}
inline void s2c_CREATE_MISSILE::set_obj_id(uint64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_CREATE_MISSILE.obj_id)
}

// .Protocol.Vec2 obj_pos = 2;
inline bool s2c_CREATE_MISSILE::_internal_has_obj_pos() const {
  return this != internal_default_instance() && _impl_.obj_pos_ != nullptr;
}
inline bool s2c_CREATE_MISSILE::has_obj_pos() const {
  return _internal_has_obj_pos();
}
inline const ::Protocol::Vec2& s2c_CREATE_MISSILE::_internal_obj_pos() const {
  const ::Protocol::Vec2* p = _impl_.obj_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec2&>(
      ::Protocol::_Vec2_default_instance_);
}
inline const ::Protocol::Vec2& s2c_CREATE_MISSILE::obj_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_MISSILE.obj_pos)
  return _internal_obj_pos();
}
inline void s2c_CREATE_MISSILE::unsafe_arena_set_allocated_obj_pos(
    ::Protocol::Vec2* obj_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  _impl_.obj_pos_ = obj_pos;
  if (obj_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.s2c_CREATE_MISSILE.obj_pos)
}
inline ::Protocol::Vec2* s2c_CREATE_MISSILE::release_obj_pos() {
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec2* s2c_CREATE_MISSILE::unsafe_arena_release_obj_pos() {
  // @@protoc_insertion_point(field_release:Protocol.s2c_CREATE_MISSILE.obj_pos)
  
  ::Protocol::Vec2* temp = _impl_.obj_pos_;
  _impl_.obj_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vec2* s2c_CREATE_MISSILE::_internal_mutable_obj_pos() {
  
  if (_impl_.obj_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec2>(GetArenaForAllocation());
    _impl_.obj_pos_ = p;
  }
  return _impl_.obj_pos_;
}
inline ::Protocol::Vec2* s2c_CREATE_MISSILE::mutable_obj_pos() {
  ::Protocol::Vec2* _msg = _internal_mutable_obj_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.s2c_CREATE_MISSILE.obj_pos)
  return _msg;
}
inline void s2c_CREATE_MISSILE::set_allocated_obj_pos(::Protocol::Vec2* obj_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obj_pos_);
  }
  if (obj_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_pos));
    if (message_arena != submessage_arena) {
      obj_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obj_pos_ = obj_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.s2c_CREATE_MISSILE.obj_pos)
}

// uint64 time_stamp = 3;
inline void s2c_CREATE_MISSILE::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t s2c_CREATE_MISSILE::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t s2c_CREATE_MISSILE::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.s2c_CREATE_MISSILE.time_stamp)
  return _internal_time_stamp();
}
inline void s2c_CREATE_MISSILE::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void s2c_CREATE_MISSILE::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.s2c_CREATE_MISSILE.time_stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
