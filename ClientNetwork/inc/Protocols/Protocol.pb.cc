// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR c2s_LOGIN::c2s_LOGIN(
    ::_pbi::ConstantInitialized) {}
struct c2s_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR c2s_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~c2s_LOGINDefaultTypeInternal() {}
  union {
    c2s_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 c2s_LOGINDefaultTypeInternal _c2s_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR s2c_LOGIN::s2c_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s2c_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s2c_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s2c_LOGINDefaultTypeInternal() {}
  union {
    s2c_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s2c_LOGINDefaultTypeInternal _s2c_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR c2s_BREAK_TILE::c2s_BREAK_TILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tile_x_)*/0
  , /*decltype(_impl_.tile_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct c2s_BREAK_TILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR c2s_BREAK_TILEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~c2s_BREAK_TILEDefaultTypeInternal() {}
  union {
    c2s_BREAK_TILE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 c2s_BREAK_TILEDefaultTypeInternal _c2s_BREAK_TILE_default_instance_;
PROTOBUF_CONSTEXPR s2c_BREAK_TILE::s2c_BREAK_TILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.tile_x_)*/0
  , /*decltype(_impl_.tile_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s2c_BREAK_TILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s2c_BREAK_TILEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s2c_BREAK_TILEDefaultTypeInternal() {}
  union {
    s2c_BREAK_TILE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s2c_BREAK_TILEDefaultTypeInternal _s2c_BREAK_TILE_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::c2s_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_LOGIN, _impl_.seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::c2s_BREAK_TILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::c2s_BREAK_TILE, _impl_.tile_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::c2s_BREAK_TILE, _impl_.tile_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_BREAK_TILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_BREAK_TILE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_BREAK_TILE, _impl_.tile_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::s2c_BREAK_TILE, _impl_.tile_y_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::c2s_LOGIN)},
  { 6, -1, -1, sizeof(::Protocol::s2c_LOGIN)},
  { 13, -1, -1, sizeof(::Protocol::c2s_BREAK_TILE)},
  { 21, -1, -1, sizeof(::Protocol::s2c_BREAK_TILE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_c2s_LOGIN_default_instance_._instance,
  &::Protocol::_s2c_LOGIN_default_instance_._instance,
  &::Protocol::_c2s_BREAK_TILE_default_instance_._instance,
  &::Protocol::_s2c_BREAK_TILE_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\013\n\tc2s_LOGIN\"\031\n\ts2c_LOGIN\022\014"
  "\n\004seed\030\001 \001(\005\"0\n\016c2s_BREAK_TILE\022\016\n\006tile_x"
  "\030\001 \001(\005\022\016\n\006tile_y\030\002 \001(\005\"A\n\016s2c_BREAK_TILE"
  "\022\017\n\007success\030\001 \001(\010\022\016\n\006tile_x\030\002 \001(\005\022\016\n\006til"
  "e_y\030\003 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 217, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class c2s_LOGIN::_Internal {
 public:
};

c2s_LOGIN::c2s_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.c2s_LOGIN)
}
c2s_LOGIN::c2s_LOGIN(const c2s_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  c2s_LOGIN* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.c2s_LOGIN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData c2s_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*c2s_LOGIN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata c2s_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class s2c_LOGIN::_Internal {
 public:
};

s2c_LOGIN::s2c_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.s2c_LOGIN)
}
s2c_LOGIN::s2c_LOGIN(const s2c_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s2c_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seed_ = from._impl_.seed_;
  // @@protoc_insertion_point(copy_constructor:Protocol.s2c_LOGIN)
}

inline void s2c_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s2c_LOGIN::~s2c_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.s2c_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s2c_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2c_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s2c_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.s2c_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2c_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s2c_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.s2c_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seed = 1;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.s2c_LOGIN)
  return target;
}

size_t s2c_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.s2c_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seed = 1;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2c_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s2c_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2c_LOGIN::GetClassData() const { return &_class_data_; }


void s2c_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s2c_LOGIN*>(&to_msg);
  auto& from = static_cast<const s2c_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.s2c_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2c_LOGIN::CopyFrom(const s2c_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.s2c_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_LOGIN::IsInitialized() const {
  return true;
}

void s2c_LOGIN::InternalSwap(s2c_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seed_, other->_impl_.seed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2c_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class c2s_BREAK_TILE::_Internal {
 public:
};

c2s_BREAK_TILE::c2s_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.c2s_BREAK_TILE)
}
c2s_BREAK_TILE::c2s_BREAK_TILE(const c2s_BREAK_TILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  c2s_BREAK_TILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_x_){}
    , decltype(_impl_.tile_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tile_x_, &from._impl_.tile_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tile_y_) -
    reinterpret_cast<char*>(&_impl_.tile_x_)) + sizeof(_impl_.tile_y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.c2s_BREAK_TILE)
}

inline void c2s_BREAK_TILE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_x_){0}
    , decltype(_impl_.tile_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

c2s_BREAK_TILE::~c2s_BREAK_TILE() {
  // @@protoc_insertion_point(destructor:Protocol.c2s_BREAK_TILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void c2s_BREAK_TILE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void c2s_BREAK_TILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void c2s_BREAK_TILE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.c2s_BREAK_TILE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tile_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tile_y_) -
      reinterpret_cast<char*>(&_impl_.tile_x_)) + sizeof(_impl_.tile_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* c2s_BREAK_TILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tile_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tile_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tile_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tile_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* c2s_BREAK_TILE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.c2s_BREAK_TILE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tile_x = 1;
  if (this->_internal_tile_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_x(), target);
  }

  // int32 tile_y = 2;
  if (this->_internal_tile_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tile_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.c2s_BREAK_TILE)
  return target;
}

size_t c2s_BREAK_TILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.c2s_BREAK_TILE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tile_x = 1;
  if (this->_internal_tile_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile_x());
  }

  // int32 tile_y = 2;
  if (this->_internal_tile_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData c2s_BREAK_TILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    c2s_BREAK_TILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*c2s_BREAK_TILE::GetClassData() const { return &_class_data_; }


void c2s_BREAK_TILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<c2s_BREAK_TILE*>(&to_msg);
  auto& from = static_cast<const c2s_BREAK_TILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.c2s_BREAK_TILE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tile_x() != 0) {
    _this->_internal_set_tile_x(from._internal_tile_x());
  }
  if (from._internal_tile_y() != 0) {
    _this->_internal_set_tile_y(from._internal_tile_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void c2s_BREAK_TILE::CopyFrom(const c2s_BREAK_TILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.c2s_BREAK_TILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_BREAK_TILE::IsInitialized() const {
  return true;
}

void c2s_BREAK_TILE::InternalSwap(c2s_BREAK_TILE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(c2s_BREAK_TILE, _impl_.tile_y_)
      + sizeof(c2s_BREAK_TILE::_impl_.tile_y_)
      - PROTOBUF_FIELD_OFFSET(c2s_BREAK_TILE, _impl_.tile_x_)>(
          reinterpret_cast<char*>(&_impl_.tile_x_),
          reinterpret_cast<char*>(&other->_impl_.tile_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata c2s_BREAK_TILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class s2c_BREAK_TILE::_Internal {
 public:
};

s2c_BREAK_TILE::s2c_BREAK_TILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.s2c_BREAK_TILE)
}
s2c_BREAK_TILE::s2c_BREAK_TILE(const s2c_BREAK_TILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s2c_BREAK_TILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.tile_x_){}
    , decltype(_impl_.tile_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tile_y_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.tile_y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.s2c_BREAK_TILE)
}

inline void s2c_BREAK_TILE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.tile_x_){0}
    , decltype(_impl_.tile_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s2c_BREAK_TILE::~s2c_BREAK_TILE() {
  // @@protoc_insertion_point(destructor:Protocol.s2c_BREAK_TILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s2c_BREAK_TILE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2c_BREAK_TILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s2c_BREAK_TILE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.s2c_BREAK_TILE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tile_y_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.tile_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2c_BREAK_TILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tile_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tile_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tile_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tile_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s2c_BREAK_TILE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.s2c_BREAK_TILE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 tile_x = 2;
  if (this->_internal_tile_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tile_x(), target);
  }

  // int32 tile_y = 3;
  if (this->_internal_tile_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tile_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.s2c_BREAK_TILE)
  return target;
}

size_t s2c_BREAK_TILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.s2c_BREAK_TILE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 tile_x = 2;
  if (this->_internal_tile_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile_x());
  }

  // int32 tile_y = 3;
  if (this->_internal_tile_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2c_BREAK_TILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s2c_BREAK_TILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2c_BREAK_TILE::GetClassData() const { return &_class_data_; }


void s2c_BREAK_TILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s2c_BREAK_TILE*>(&to_msg);
  auto& from = static_cast<const s2c_BREAK_TILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.s2c_BREAK_TILE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_tile_x() != 0) {
    _this->_internal_set_tile_x(from._internal_tile_x());
  }
  if (from._internal_tile_y() != 0) {
    _this->_internal_set_tile_y(from._internal_tile_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2c_BREAK_TILE::CopyFrom(const s2c_BREAK_TILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.s2c_BREAK_TILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_BREAK_TILE::IsInitialized() const {
  return true;
}

void s2c_BREAK_TILE::InternalSwap(s2c_BREAK_TILE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s2c_BREAK_TILE, _impl_.tile_y_)
      + sizeof(s2c_BREAK_TILE::_impl_.tile_y_)
      - PROTOBUF_FIELD_OFFSET(s2c_BREAK_TILE, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s2c_BREAK_TILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::c2s_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::c2s_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::c2s_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::s2c_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::s2c_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::s2c_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::c2s_BREAK_TILE*
Arena::CreateMaybeMessage< ::Protocol::c2s_BREAK_TILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::c2s_BREAK_TILE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::s2c_BREAK_TILE*
Arena::CreateMaybeMessage< ::Protocol::s2c_BREAK_TILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::s2c_BREAK_TILE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
